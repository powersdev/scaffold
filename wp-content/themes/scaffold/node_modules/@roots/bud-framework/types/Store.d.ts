import { Locations } from './';
import { ConfigMap } from './config.map';
import { Framework } from './Framework';
import { Service } from './Service';
/**
 * Container store for initial configuration and general options
 *
 * @public
 */
export declare class Store<T = Store.Repository> extends Service<T> {
    /**
     * Service identifier
     *
     * @public
     */
    ident: string;
    /**
     * Store constructor
     *
     * @param app - Framework
     * @param options - Partial framework config
     */
    constructor(app: Framework, options: Partial<Store.Repository>);
    /**
     * Get a store value
     *
     * @override
     */
    get<K extends keyof Store.Map & string, T = Store.Map[K]>(path: K): T;
    /**
     * Set a store value
     *
     * @override
     */
    set<K extends keyof Store.Map & string, T = Store.Map[K]>(path: K, value: T): this;
}
export declare type FrameworkCallable<T> = (app: Framework) => T;
export declare type CompilerConfigCallables = {
    [K in keyof ConfigMap as `${K & string}`]: FrameworkCallable<ConfigMap[K]>;
};
export declare namespace Store {
    /**
     * Framework base configuration
     *
     * @remarks
     * These are just initial values. They can be overwritten by the user, or extended by the framework/modules.
     * It is recommended to use {@link @roots/bud-framework#Hooks.on} to extend the
     *
     * @public
     */
    export interface Repository extends CompilerConfigCallables {
        /**
         * Application name
         *
         * @public
         */
        name: string;
        /**
         * Is caching enabled?
         *
         * @public
         */
        ['features.cache']?: boolean;
        /**
         * Feature toggle: Clean dist before compilation
         *
         * When enabled stale assets will be removed from
         * the `@dist` directory prior to the next
         * compilation.
         *
         * @defaultValue true
         *
         * @public
         */
        ['features.clean']?: boolean;
        /**
         * Enable or disable filename hashing
         *
         * @defaultValue false
         *
         * @public
         */
        ['features.hash']?: boolean;
        /**
         * Emit html template
         *
         * @defaultValue true
         *
         * @public
         */
        ['features.html']?: boolean;
        /**
         * Automatically inject installed extensions
         *
         * @public
         */
        ['features.inject']?: boolean;
        /**
         * Log to console
         *
         * @defaultValue false
         *
         * @public
         */
        ['features.log']?: boolean;
        /**
         * Enable or disable producing a manifest.json file
         *
         * @defaultValue true
         *
         * @public
         */
        ['features.manifest']?: boolean;
        /**
         * Enable or disable proxy
         */
        ['features.proxy']?: boolean;
        /**
         * Enable or disable runtime chunk
         *
         * @public
         */
        ['features.runtimeChunk']?: boolean;
        /**
         * Enable or disable chunk splitting (vendor)
         *
         * @defaultValue false
         *
         * @public
         */
        ['features.splitChunks']?: boolean;
        /**
         * Shared regular expressions for pattern matching.
         *
         * @example
         * ```js
         * app.patterns.get('js')
         * ```
         *
         * @public
         */
        patterns: Record<string, RegExp>;
        /**
         * Registered fs directories
         *
         * @public
         */
        location: Partial<Locations> & {
            '@src': string;
            '@dist': string;
            '@modules': string;
            '@storage': string;
        };
        /**
         * File format (when hashing is disabled)
         *
         * @remarks
         * do not include extension
         *
         * @defaultValue '[name]'
         *
         * @public
         */
        fileFormat: string;
        /**
         * File format when hashing is enabled
         *
         * @remarks
         * do not include extension
         *
         * @defaultValue '[name].[contenthash:6]'
         *
         * @public
         */
        hashFormat: string;
    }
    export interface Map extends RepositoryKeyMap, LocationKeyMap, PatternKeyMap, CompilerConfigCallables {
    }
    type RepositoryKeyMap = {
        [K in keyof Repository as `${K & string}`]: Repository[K];
    };
    type LocationKeyMap = {
        [K in keyof Repository['location'] as `location.${K & string}`]: Repository['location'][K];
    };
    type PatternKeys = 'js' | 'css' | 'font' | 'image' | 'modules' | 'html' | 'ts' | 'sass' | 'cssModule' | 'sassModule' | 'svg' | 'vue' | 'md' | 'json' | 'json5' | 'toml' | 'yml' | 'xml' | 'csv' | 'webp';
    type PatternKeyMap = {
        [K in PatternKeys as `patterns.${K & string}`]: Repository['patterns'][K];
    };
    export {};
}
//# sourceMappingURL=Store.d.ts.map
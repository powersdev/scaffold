"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lifecycle = void 0;
const bud_support_1 = require("@roots/bud-support");
const constants_1 = require("./constants");
const { isUndefined } = bud_support_1.lodash;
/**
 * Initializes and binds {@link Framework.services}
 *
 * @example
 * ```js
 * new FrameworkImplementation(...constructorParams).bootstrap()
 * ```
 *
 * @param this - {@link Framework}
 * @returns Framework
 *
 * @public
 */
async function lifecycle() {
    this.logger.instance.time(`building ${this.name}`);
    /**
     * Get bindable services
     */
    const validServices = Object.entries(this.services).filter(([name]) => {
        /**
         * - No reason to start server for production
         * - No reason to boot expensive parent services for child compilation instantances
         */
        return (this.isProduction && constants_1.DEVELOPMENT_SERVICES.includes(name)) ||
            (!this.isRoot && constants_1.PARENT_SERVICES.includes(name))
            ? false
            : true;
    });
    /**
     * Initialize services
     */
    const initializedServices = validServices
        .filter(([name]) => isUndefined(this[name]))
        .map(([name, Service]) => {
        this[name] = new Service(this);
        return this[name];
    });
    /**
     * Service lifecycle
     */
    await constants_1.LIFECYCLE_EVENTS.reduce(async (promised, event, i) => {
        await promised;
        const eligibleServices = initializedServices.filter(service => service[event]);
        if (!eligibleServices.length)
            return;
        await Promise.all(eligibleServices.map(async (service, i) => {
            this.await({
                message: `[${i + 1}/${eligibleServices.length}] ${event}`,
                suffix: service.constructor.name.toLowerCase(),
            });
            await service[event](this);
            this.success({
                message: `[${i + 1}/${eligibleServices.length}] ${event}`,
                suffix: service.constructor.name.toLowerCase(),
            });
        }));
    }, Promise.resolve());
    this.timeEnd(`building ${this.name}`);
    return this;
}
exports.lifecycle = lifecycle;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = exports.isProvided = void 0;
const join_1 = __importDefault(require("lodash/join"));
/**
 * Packages in the `@wordpress` namespace which
 * should not be considered as external
 */
const OMIT_PACKAGE_MATCHES = ['@wordpress/icons', '@wordpress/interface'];
/**
 * Pkg map
 */
const packageMap = new Map([
    [
        'jquery',
        {
            window: (0, join_1.default)(['jQuery'], '.'),
            enqueue: 'jquery',
        },
    ],
    [
        'lodash',
        {
            window: (0, join_1.default)(['lodash'], '.'),
            enqueue: 'lodash',
        },
    ],
    [
        'react',
        {
            window: (0, join_1.default)(['React'], '.'),
            enqueue: 'react',
        },
    ],
    [
        'react-dom',
        {
            window: (0, join_1.default)(['ReactDOM'], '.'),
            enqueue: 'react-dom',
        },
    ],
]);
/**
 * Camelize wordpress package name
 */
const camelize = (packageName) => packageName.replace(/-(.)/g, (_m, g) => g.toUpperCase());
/**
 * Transform wordpress package name
 */
const transformPackageName = (packageName) => packageName.replace(/^@wordpress\/(.*)$/, (_m, g) => g);
/**
 * Is pkg string a wordpress window var match
 */
const isProvided = packageName => {
    if (!packageName || OMIT_PACKAGE_MATCHES.includes(packageName))
        return false;
    return (packageName.includes('@wordpress') ||
        Array.from(packageMap.keys()).includes(packageName));
};
exports.isProvided = isProvided;
/**
 * Transform pkg string request
 */
const transform = (packageName) => {
    const transformedPackageName = transformPackageName(packageName);
    if (packageMap.has(packageName))
        return packageMap.get(packageName);
    if ((0, exports.isProvided)(packageName)) {
        return {
            window: ['wp', camelize(transformedPackageName)],
            enqueue: (0, join_1.default)(['wp', transformedPackageName], '-'),
        };
    }
};
exports.transform = transform;

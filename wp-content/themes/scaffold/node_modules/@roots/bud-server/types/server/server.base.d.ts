/// <reference types="node" />
import { Framework, Server } from '@roots/bud-framework';
import { Connection } from '@roots/bud-framework/src/Server/Connection';
import { Signale } from '@roots/bud-support';
import { IncomingMessage, Server as HttpServer } from 'http';
import { Server as HttpsServer } from 'https';
import { ServerResponse } from 'webpack-dev-middleware';
/**
 * Node server
 * @public
 */
export declare abstract class BaseServer implements Connection {
    app: Framework;
    /**
     * protocol
     * @virtual
     * @public
     */
    abstract protocol: 'http:' | 'https:';
    /**
     * Create server
     * @virtual
     * @public
     */
    abstract createServer(app: any): Promise<HttpServer | HttpsServer>;
    /**
     * Server instance
     * @public
     */
    instance: Connection['instance'];
    /**
     * Logger
     * @public
     */
    logger: Signale;
    /**
     * Port
     * @public
     */
    port: number;
    /**
     * Final URL
     *
     * @remarks
     * For overrides: this is what the listen event will be passed
     *
     * @public
     */
    url: URL;
    /**
     * host
     * @public
     */
    get hostname(): string;
    /**
     * interface
     * @public
     */
    get interface(): string;
    /**
     * Options
     * @public
     */
    get options(): Server.Options;
    /**
     * Port options
     * @public
     */
    get specification(): {
        port: number[];
        exclude: number[];
        host: string;
    };
    /**
     * Constructor
     * @param app - Framework
     * @public
     */
    constructor(app: Framework);
    /**
     * setup
     * @public
     * @decorator `@bind`
     */
    setup(): Promise<void>;
    /**
     * Listen
     * @public
     * @decorator `@bind`
     */
    listen(): Promise<void>;
    /**
     * Server listen event
     * @public
     * @decorator `@bind`
     */
    onListening(...param: any[]): void;
    /**
     * Server request
     * @public
     * @decorator `@bind`
     */
    onRequest(request: IncomingMessage, response: ServerResponse): Promise<ServerResponse>;
    /**
     * Server error
     * @public
     * @decorator `@bind`
     */
    onError(error: Error): void;
}
//# sourceMappingURL=server.base.d.ts.map
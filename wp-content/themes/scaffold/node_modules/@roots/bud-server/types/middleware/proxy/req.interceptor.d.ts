/// <reference types="node" />
import { Framework } from '@roots/bud-framework';
import { ClientRequest, IncomingMessage, ServerResponse } from 'http';
import { ApplicationURL } from './url';
/**
 * Proxy request interceptor
 *
 * @public
 */
export declare class RequestInterceptorFactory {
    _app: () => Framework;
    url: ApplicationURL;
    /**
     * Bud instance
     *
     * @public
     */
    get app(): Framework;
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app: () => Framework, url: ApplicationURL);
    /**
     * Callback for `http-proxy-middleware` `onProxyReq`
     *
     * @param proxyRequest - proxy client request
     * @param request - incoming message
     * @param response - server response
     * @returns void
     *
     * @public
     * @decorator `@bind`
     */
    _interceptor(proxyRequest: ClientRequest, request: IncomingMessage, _response: ServerResponse): Promise<void>;
    /**
     * Returns the onProxyReq callback
     */
    make(): (proxyRequest: ClientRequest, request: IncomingMessage, _response: ServerResponse) => Promise<void>;
}
//# sourceMappingURL=req.interceptor.d.ts.map
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseServer = void 0;
const bud_support_1 = require("@roots/bud-support");
/**
 * Node server
 * @public
 */
class BaseServer {
    /**
     * Constructor
     * @param app - Framework
     * @public
     */
    constructor(app) {
        this.app = app;
        this.logger = this.app.logger.instance.scope(this.constructor.name.toLowerCase());
    }
    /**
     * host
     * @public
     */
    get hostname() {
        return this.app.hooks.filter('dev.hostname', '0.0.0.0');
    }
    /**
     * interface
     * @public
     */
    get interface() {
        return this.app.hooks.filter('dev.interface');
    }
    /**
     * Options
     * @public
     */
    get options() {
        return this.app.hooks.filter(`dev.options`);
    }
    /**
     * Port options
     * @public
     */
    get specification() {
        return {
            port: this.app.hooks.filter('dev.port', [3000]),
            exclude: this.app.hooks.filter('dev.exclude', []),
            host: this.interface,
        };
    }
    /**
     * setup
     * @public
     * @decorator `@bind`
     */
    async setup() {
        this.port = await (0, bud_support_1.getPort)(this.specification);
        if (!this.specification.port.includes(Number(this.port))) {
            this.logger.warn(`\n`, `None of the requested ports could be resolved.`, `A port was automatically selected: ${this.port}`, `\n`);
        }
        this.url = new URL(`${this.protocol}//${this.hostname}`);
        this.url.port = `${this.port}`;
        this.url.pathname = '/';
    }
    /**
     * Listen
     * @public
     * @decorator `@bind`
     */
    async listen() {
        this.instance
            .listen({
            port: Number(this.url.port),
        })
            .on('listening', this.onListening)
            .on('request', this.onRequest)
            .on('error', this.onError);
    }
    /**
     * Server listen event
     * @public
     * @decorator `@bind`
     */
    onListening(...param) {
        this.logger.info(`listening`, ...param);
    }
    /**
     * Server request
     * @public
     * @decorator `@bind`
     */
    async onRequest(request, response) {
        this.logger.log(`[${response.statusCode}]`, request.url, response.statusMessage ?? '');
        return response;
    }
    /**
     * Server error
     * @public
     * @decorator `@bind`
     */
    onError(error) {
        this.app.error(error);
    }
}
__decorate([
    bud_support_1.bind
], BaseServer.prototype, "setup", null);
__decorate([
    bud_support_1.bind
], BaseServer.prototype, "listen", null);
__decorate([
    bud_support_1.bind
], BaseServer.prototype, "onListening", null);
__decorate([
    bud_support_1.bind
], BaseServer.prototype, "onRequest", null);
__decorate([
    bud_support_1.bind
], BaseServer.prototype, "onError", null);
exports.BaseServer = BaseServer;

/* eslint-disable no-console */
/* global __resourceQuery */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
;
(async (query) => {
    const querystring = await Promise.resolve().then(() => __importStar(require('querystring')));
    const hmr = await Promise.resolve().then(() => __importStar(require('./bridge')));
    const controllers = [];
    const FALLBACK_OPTS = {
        ['bud.overlay']: true,
        ['bud.indicator']: true,
        autoConnect: false,
        timeout: 20 * 1000,
        overlay: false,
        reload: false,
        log: false,
        warn: false,
        name: '',
        overlayWarnings: false,
        path: '/__hmr',
    };
    const options = Object.entries(querystring.parse(query.slice(1))).reduce((a, [k, v]) => {
        if (v === 'true')
            v = true;
        if (v === 'false')
            v = false;
        return { ...a, [k]: v };
    }, FALLBACK_OPTS);
    hmr.setOptionsAndConnect(options);
    if (options['bud.indicator']) {
        const controllerModule = await Promise.resolve().then(() => __importStar(require('./indicator/index.js')));
        const controller = await controllerModule.make();
        controller?.update && controllers.push(controller);
    }
    if (options['bud.overlay']) {
        const controllerModule = await Promise.resolve().then(() => __importStar(require('./overlay/index.js')));
        const controller = await controllerModule.make();
        controller?.update && controllers.push(controller);
    }
    hmr.subscribeAll(payload => {
        if (!payload)
            return;
        console.table(payload);
        payload.warnings?.map(console.warn);
        payload.errors?.map(console.error);
        controllers.map(controller => controller.update(payload));
        if (payload.action === 'reload')
            window.location.reload();
    });
})(
// @ts-ignore
__resourceQuery);

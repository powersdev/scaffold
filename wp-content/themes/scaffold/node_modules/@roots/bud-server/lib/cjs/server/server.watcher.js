"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Watcher = void 0;
const bud_support_1 = require("@roots/bud-support");
/**
 * FS Watcher
 *
 * @public
 */
class Watcher {
    /**
     * Class constructor
     *
     * @param app - Application instance
     */
    constructor(app) {
        this.app = app;
    }
    /**
     * Get watched files
     *
     * @public
     * @decorator `@bind`
     */
    async getWatchedFiles() {
        const files = this.app.hooks.filter('dev.watch.files');
        if (files.size === 0)
            return [];
        return await bud_support_1.globby.globby(Array.from(files), this.app.hooks.filter('dev.watch.options'));
    }
    /**
     * Initialize watch files
     *
     * @public
     * @decorator `@bind`
     */
    async watch() {
        const { info } = this.app.logger.instance.scope('watch');
        const watchFiles = await this.getWatchedFiles();
        if (!watchFiles.length)
            return;
        info(`watching ${watchFiles.length} files for changes`);
        this.instance = bud_support_1.chokidar.watch(watchFiles).on('change', path => {
            info('edit to', path.replace(this.app.path(), '[project]'), 'triggered reload');
            this.app.server.appliedMiddleware?.hot?.publish({
                action: 'reload',
                message: `Detected file change: ${path}. Reloading window.`,
            });
        });
        return this.instance;
    }
}
__decorate([
    bud_support_1.bind
], Watcher.prototype, "getWatchedFiles", null);
__decorate([
    bud_support_1.bind
], Watcher.prototype, "watch", null);
exports.Watcher = Watcher;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = void 0;
const indicator_pulse_1 = require("./indicator.pulse");
/**
 * Indicator web component
 * @public
 */
class Component extends HTMLElement {
    constructor() {
        super(...arguments);
        /**
         * Component name
         * @public
         */
        this.name = `bud-activity-indicator`;
        /**
         * Status indicator colors
         * @public
         */
        this.colors = {
            success: [4, 120, 87],
            error: [220, 38, 38],
            warn: [252, 211, 77],
            pending: [59, 130, 246],
        };
    }
    /**
     * Get accessor: has errors
     * @public
     */
    get hasErrors() {
        return this.getAttribute('has-errors') == 'true';
    }
    /**
     * Get accessor: has warnings
     * @public
     */
    get hasWarnings() {
        return this.getAttribute('has-warnings') == 'true';
    }
    /**
     * Render status indicator
     * @public
     */
    render() {
        this.classList.add(this.name);
        this.innerHTML = `
    <style>
      .${this.name} {
        position: fixed;
        width: 10px;
        height: 10px;
        left: 10px;
        bottom: 10px;
        z-index: 9998;
        margin: 10px;
        padding: 5px;
        transition: opacity ease 1500ms;
        pointer-events: none;
        border-radius: 50%;
      }

      ${(0, indicator_pulse_1.pulse)(`${this.name}__success`, this.colors.success)}
      ${(0, indicator_pulse_1.pulse)(`${this.name}__error`, this.colors.error)}
      ${(0, indicator_pulse_1.pulse)(`${this.name}__warning`, this.colors.warn)}
      ${(0, indicator_pulse_1.pulse)(`${this.name}__pending`, this.colors.pending)}

      .${this.name}__visible {
        opacity: 1;
      }

      .${this.name}__hidden {
        opacity: 0;
      }
    </style>
    `;
    }
    /**
     * Show status indicator
     * @public
     */
    show() {
        clearTimeout(this.hideTimeout);
        this.classList.remove(`${this.name}__hidden`);
    }
    /**
     * Hide status indicator
     */
    hide() {
        this.hideTimeout = setTimeout(() => {
            this.classList.remove(`${this.name}__error`, `${this.name}__warning`, `${this.name}__success`, `${this.name}__pending`);
            this.classList.add(`${this.name}__hidden`);
        }, 2000);
    }
    /**
     * Status is pending
     * @public
     */
    onPending() {
        this.show();
        this.classList.remove(`${this.name}__error`, `${this.name}__warning`, `${this.name}__success`);
        this.classList.add(`${this.name}__pending`);
        this.hide();
    }
    /**
     * Status is success
     * @public
     */
    onSuccess() {
        this.show();
        this.classList.remove(`${this.name}__error`, `${this.name}__warning`, `${this.name}__pending`);
        this.classList.add(`${this.name}__success`);
        this.hide();
    }
    /**
     * Status is error
     * @public
     */
    onError() {
        this.show();
        this.classList.remove(`${this.name}__warning`, `${this.name}__success`, `${this.name}__pending`);
        this.classList.add(`${this.name}__error`);
    }
    /**
     * Status is warning
     * @public
     */
    onWarning() {
        this.show();
        this.classList.remove(`${this.name}__error`, `${this.name}__success`, `${this.name}__pending`);
        this.classList.add(`${this.name}__warning`);
    }
    /**
     * Update status
     * @public
     */
    update() {
        if (this.payload?.errors?.length)
            return this.onError();
        if (this.payload?.warnings?.length)
            return this.onWarning();
        if (!this.payload?.errors?.length &&
            !this.payload?.warnings?.length &&
            this.payload.action == 'built')
            return this.onSuccess();
        if (this.payload?.action == 'building' ||
            this.payload?.action == 'sync')
            return this.onPending();
    }
    static get observedAttributes() {
        return ['has-errors', 'has-warnings', 'action'];
    }
    attributeChangedCallback() {
        this.update();
    }
    connectedCallback() {
        if (!this.rendered) {
            this.render();
            this.rendered = true;
        }
    }
}
exports.Component = Component;

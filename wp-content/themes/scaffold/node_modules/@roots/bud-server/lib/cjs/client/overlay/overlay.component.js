"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = void 0;
/**
 * Component container
 *
 * @public
 */
class Component extends HTMLElement {
    constructor() {
        super(...arguments);
        this.name = `bud-overlay`;
    }
    get message() {
        return this.getAttribute('message');
    }
    /**
     * Render component
     *
     * @public
     */
    render() {
        this.rendered = true;
        this.classList.add(this.name);
    }
    setInnerHtml(content) {
        this.innerHTML = `
    <style>
      .${this.name} {
        display: none;
        width: 100vw;
        height: 100vh;
        overflow-x: hidden;
        overflow-y: scroll;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        transition: all 0.2s ease-in-out;
        justify-content: center;
      }
      .${this.name}__visible {
        backdrop-filter: blur(10px);
        background: rgba(255, 255, 255, 0.75);
        border-top: 3px solid red;
        display: flex;
        align-items: center;
        align-content: center;
        flex-direction: column;
        transition: all 0.2s ease-in-out;
      }
      .${this.name} > div {
        align-items: center;
        align-content: center;
        flex-direction: column;
        padding: 1rem;
      }
      .${this.name} > div > * {
        display: inline-block;
        width: 100vw;
        padding: 1rem;
      }
      .${this.name} > div > span {
        font-size: 1.5rem;
        font-weight: 500;
      }
      .${this.name} > div > pre {
        font-size: 0.8rem;
        overflow-x: scroll;
      }
    </style>
    ${content ?? ''}
  `;
    }
    static get observedAttributes() {
        return ['message'];
    }
    attributeChangedCallback() {
        if (this.getAttribute('message')) {
            document.body.style.overflow = 'hidden';
            !this.classList.contains(`${this.name}__visible`) &&
                this.classList.add(`${this.name}__visible`);
            return this.setInnerHtml(this.getAttribute('message'));
        }
        document.body.style.overflow = this.documentBodyStyle.overflow;
        this.classList.contains(`${this.name}__visible`) &&
            this.classList.remove(`${this.name}__visible`);
    }
    connectedCallback() {
        this.documentBodyStyle = document.body.style;
        if (this.rendered)
            return;
        this.render();
    }
}
exports.Component = Component;

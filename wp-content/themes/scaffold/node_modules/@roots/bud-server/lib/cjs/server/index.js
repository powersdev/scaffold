"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const Framework = __importStar(require("@roots/bud-framework"));
const bud_support_1 = require("@roots/bud-support");
const express_1 = __importDefault(require("express"));
const inject_1 = require("../client/inject");
const middlewareMap = __importStar(require("../middleware"));
const seed_1 = require("../seed");
const server_http_1 = require("./server.http");
const server_https_1 = require("./server.https");
const server_watcher_1 = require("./server.watcher");
/**
 * Server service class
 * @public
 */
class Server extends Framework.Service {
    constructor() {
        super(...arguments);
        /**
         * Express instance
         * @public
         */
        this.express = express_1.default;
        /**
         * Available middleware
         * @public
         */
        this.availableMiddleware = middlewareMap;
        /**
         * Applied middleware
         * @public
         */
        this.appliedMiddleware = {};
    }
    /**
     * Utilized middleware
     * @public
     */
    get enabledMiddleware() {
        return this.app.hooks.filter('middleware.enabled').reduce((enabled, key) => ({
            ...enabled,
            [key]: this.availableMiddleware[key],
        }), {});
    }
    /**
     * Register service
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async register() {
        (0, seed_1.seed)(this.app);
        this.application = this.express();
        this.application.set('x-powered-by', false);
        this.watcher = new server_watcher_1.Watcher(this.app);
    }
    /**
     * Boot service
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async boot() {
        this.app.hooks.action('event.server.before', this.setConnection, this.injectScripts, this.app.compiler.compile, this.applyMiddleware);
        this.app.hooks.action('event.server.after', this.watcher.watch);
    }
    /**
     * Set connection
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async setConnection() {
        this.connection = this.app.hooks.filter('dev.ssl')
            ? new server_https_1.Https(this.app)
            : new server_http_1.Http(this.app);
        await this.connection.setup();
    }
    /**
     * Inject scripts
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async injectScripts() {
        await Promise.all([this.app, ...this.app.children.getValues()].map(async (instance) => {
            await (0, inject_1.inject)(instance, Array.from(instance.hooks.filter('dev.client.scripts') ?? new Set([])));
        }));
    }
    /**
     * Apply middleware
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async applyMiddleware() {
        Object.entries(this.enabledMiddleware).map(([key, middleware]) => {
            this.appliedMiddleware[key] = middleware(this.app);
            this.application.use(this.appliedMiddleware[key]);
        });
    }
    /**
     * Run development server
     * @public
     * @decorator `@bind`
     */
    async run() {
        await this.app.hooks.fire('event.server.before');
        await this.connection.createServer(this.application);
        await this.connection.listen();
        await this.app.hooks.fire('event.server.after');
    }
}
__decorate([
    bud_support_1.bind,
    bud_support_1.once
], Server.prototype, "register", null);
__decorate([
    bud_support_1.bind,
    bud_support_1.once
], Server.prototype, "boot", null);
__decorate([
    bud_support_1.bind,
    bud_support_1.once
], Server.prototype, "setConnection", null);
__decorate([
    bud_support_1.bind,
    bud_support_1.once
], Server.prototype, "injectScripts", null);
__decorate([
    bud_support_1.bind,
    bud_support_1.once
], Server.prototype, "applyMiddleware", null);
__decorate([
    bud_support_1.bind
], Server.prototype, "run", null);
exports.Server = Server;

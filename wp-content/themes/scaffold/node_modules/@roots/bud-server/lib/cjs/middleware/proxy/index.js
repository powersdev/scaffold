"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxy = void 0;
const http_proxy_middleware_1 = require("http-proxy-middleware");
const req_interceptor_1 = require("./req.interceptor");
const res_interceptor_1 = require("./res.interceptor");
const url_1 = require("./url");
/**
 * Proxy middleware factory
 *
 * @public
 */
const proxy = (app) => {
    const url = new url_1.ApplicationURL(() => app);
    const response = new res_interceptor_1.ResponseInterceptorFactory(() => app, url);
    const request = new req_interceptor_1.RequestInterceptorFactory(() => app, url);
    const options = {
        autoRewrite: app.hooks.filter('middleware.proxy.options.autoRewrite', true),
        /**
         * Change origin
         */
        changeOrigin: app.hooks.filter(`middleware.proxy.options.changeOrigin`, true),
        /**
         * Cookie domain rewrite
         */
        cookieDomainRewrite: app.hooks.filter(`middleware.proxy.options.cookieDomainRewrite`, url.dev.host),
        /**
         * Follow redirects
         */
        followRedirects: app.hooks.filter(`middleware.proxy.options.followRedirects`, true),
        /**
         * Headers
         */
        headers: {
            ...app.hooks.filter(`middleware.proxy.options.headers`, {
                connection: 'keep-alive',
                'access-control-allow-origin': `*`,
                'access-control-allow-credentials': `*`,
                'access-control-allow-methods': `*`,
            }),
            'x-proxy-by': '@roots/bud',
            'x-bud-dev-origin': url.dev.origin,
            'x-bud-dev-protocol': url.dev.protocol,
            'x-bud-dev-hostname': url.dev.hostname,
            'x-bud-proxy-origin': url.proxy.origin,
        },
        /**
         * Host rewrite
         */
        hostRewrite: app.hooks.filter(`middleware.proxy.options.hostRewrite`, url.dev.host),
        /**
         * Log level
         */
        logLevel: app.hooks.filter(`middleware.proxy.options.logLevel`, `info`),
        /**
         * Log provider
         */
        logProvider: () => app.logger.instance.scope('proxy'),
        /**
         * Proxy request handler
         */
        onProxyReq: app.hooks.filter(`middleware.proxy.options.onProxyReq`, request.make),
        /**
         * Proxy response handler
         */
        onProxyRes: app.hooks.filter(`middleware.proxy.options.onProxyRes`, response.make),
        /**
         * Protocol rewrite
         */
        protocolRewrite: app.hooks.filter(`middleware.proxy.options.protocolRewrite`, app.hooks.filter('dev.ssl') ? 'https' : undefined),
        /**
         * Secure
         */
        secure: app.hooks.filter(`middleware.proxy.options.secure`, false),
        /**
         * Self handle response
         */
        selfHandleResponse: app.hooks.filter(`middleware.proxy.options.selfHandleResponse`, true),
        /**
         * Target
         */
        target: app.hooks.filter('middleware.proxy.target', url.proxy),
    };
    const { log } = app.logger.instance.scope('proxy');
    Object.entries(options).map(v => log(...v));
    return (0, http_proxy_middleware_1.createProxyMiddleware)(options);
};
exports.proxy = proxy;

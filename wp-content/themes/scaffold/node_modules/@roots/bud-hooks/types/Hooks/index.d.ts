import { Framework, Hooks as Contract, Service } from '@roots/bud-framework';
/**
 * Hooks and events registry
 *
 * @remarks
 * Supports async and sync value hooks as well as asyncronous events.
 *
 * @example
 * Add a new entry to the `webpack.externals` configuration:
 *
 * ```ts
 * hooks.on(
 *   'build.externals',
 *   externals => ({
 *     ...externals,
 *     $: 'jquery',
 *   }),
 * )
 * ```
 *
 * @example
 * Change the `webpack.output.filename` format:
 *
 * ```ts
 * hooks.on(
 *   'build.output.filename',
 *   () => '[name].[hash:4]',
 * )
 * ```
 *
 * @example
 * Filter a value through any registered hooks:
 *
 * ```ts
 * hooks.filter('build.output.filename', DEFAULT_VALUE)
 * ```
 *
 * @example
 * Filter an async value through any registered hooks:
 *
 * ```ts
 * await hooks.filterAsync('my-event-name', async () => DEFAULT_VALUE)
 * ```
 *
 * @public
 */
export declare class Hooks extends Service implements Contract {
    /**
     * @internal
     */
    ident: string;
    /**
     * hook getter
     *
     * @internal
     * @decorator `@bind`
     */
    get<T = any>(path: `${keyof Contract.Map & string}`): T;
    /**
     * hook setter
     *
     * @internal
     * @decorator `@bind`
     */
    set(key: `${keyof Contract.Map & string}`, value: any): this;
    /**
     * Register a function to filter a value.
     *
     * @remarks
     * If a filter calls for this name the function is then run,
     * passing whatever data along for modification. If more than one
     * hook is registered to a name, they will be called sequentially
     * in the order they were registered, with each hook's output used
     * as the input for the next.
     *
     * @example
     * ```js
     * app.hooks.on(
     *   'namespace.key',
     *   value => 'replaced by this string',
     * )
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    on<T extends keyof Contract.Map & string>(id: T, input: Contract.Map[T] | ((value: Contract.Map[T]) => any)): Framework;
    /**
     * Register a function to filter a value.
     *
     * @remarks
     * If a filter calls for this name the function is then run,
     * passing whatever data along for modification. If more than one
     * hook is registered to a name, they will be called sequentially
     * in the order they were registered, with each hook's output used
     * as the input for the next.
     *
     * @example
     * ```js
     * app.hooks.on(
     *   'namespace.key',
     *   value => 'replaced by this string',
     * )
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    async<T extends keyof Contract.AsyncMap & string>(id: T, input: Contract.AsyncMap[T] | ((value: Contract.AsyncMap[T]) => Promise<Contract.AsyncMap[T]>)): Framework;
    /**
     * Hooks filter
     *
     * @remarks
     * The other side of bud.hooks.on. Passes a key and a value. If
     * any filters are registered on that key they will transform
     * the output before it is returned.
     *
     * @example
     * ```js
     * bud.hooks.filter(
     *   'namespace.Key.event',
     *   ['array', 'of', 'items'],
     * )
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    filter<T extends keyof Contract.Map & string>(id: T, value?: Contract.Map[T] | ((value?: Contract.Map[T]) => any)): Contract.Map[T];
    /**
     * Asyncronous hook filter
     *
     * @remarks
     * This method is used to filter a hook event.
     *
     * @example
     * ```js
     * bud.hooks.filter(
     *   'namespace.Key.event',
     *   ['array', 'of', 'items'],
     * )
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    filterAsync<T extends keyof Contract.AsyncMap & string>(id: T, value?: Contract.AsyncMap[T] | ((value?: Contract.AsyncMap[T]) => any)): Promise<Contract.AsyncMap[T]>;
    /**
     * Register an action (called with {@link Hooks.fire})
     *
     * @public
     * @decorator `@bind`
     */
    action<T extends keyof Contract.Events & string>(id: T, ...action: Array<(app: Framework) => Promise<unknown>>): Framework;
    /**
     * Fire actions registered to an event.
     *
     * @example
     * ```js
     * await app.hooks.fire('namespace.key')
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    fire<T extends keyof Contract.Events & string>(id: T): Promise<Framework>;
}
//# sourceMappingURL=index.d.ts.map
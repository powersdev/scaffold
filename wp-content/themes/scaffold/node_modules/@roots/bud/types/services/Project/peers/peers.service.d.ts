import { Framework, Peers as PeersInterface, Service } from '@roots/bud-framework';
import { AdjacencyList } from './adjacencyList';
import { Dependency } from './peers.interface';
/**
 * Peers service class
 *
 * @public
 */
export declare class Peers implements PeersInterface {
    app: Framework;
    /**
     * Log helper
     *
     * @public
     */
    get log(): Service['log'];
    adjacents: AdjacencyList;
    modules: Record<string, Dependency>;
    peerDependencies: Map<string, string>;
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app: Framework);
    /**
     * Returns path for a module name (if findable)
     *
     * @public
     * @decorator `@bind`
     */
    resolveModulePath(name: string): Promise<string>;
    /**
     * Returns manifest for a module from name (if findable)
     *
     * @public
     * @decorator `@bind`
     */
    getManifest(directoryPath: string): Promise<any>;
    /**
     * Plumbs project dependencies and gathers data
     * on bud related modules
     *
     * @public
     * @decorator `@bind`
     */
    discover(): Promise<this>;
    retrieveManifest(name: string): Promise<any>;
    collect(name: string): Promise<void>;
}
//# sourceMappingURL=peers.service.d.ts.map
import * as Framework from '@roots/bud-framework';
import { Peers } from './peers';
import { repository } from './project.repository';
/**
 * Project service
 *
 * @public
 */
export declare class Project extends Framework.Service implements Framework.Project {
    /**
     * Service ident
     *
     * @internal
     */
    ident: string;
    /**
     * Project peer dependencies manager
     *
     * @public
     */
    peers: Peers;
    /**
     * Repository values
     *
     * @public
     */
    repository: repository;
    /**
     * Service bootstrap event
     *
     * @internal
     * @decorator `@bind`
     */
    bootstrap(): Promise<void>;
    /**
     * Service register event
     *
     * @internal
     * @decorator `@bind`
     */
    register(): Promise<void>;
    /**
     * Service boot event
     *
     * @internal
     * @decorator `@bind`
     */
    boot(): Promise<void>;
    /**
     * Read project package.json and record peer dependencies
     *
     * @public
     * @decorator `@bind`
     */
    resolvePeers(): Promise<void>;
    /**
     * Read manifest from disk
     *
     * @public
     */
    loadManifest(): Promise<void>;
    /**
     * Returns true if a dependency is listed in the project manifest
     *
     * @public
     * @decorator `@bind`
     */
    hasPeerDependency(pkg: string): boolean;
    /**
     * @public
     */
    buildProfile(): Promise<void>;
    /**
     * @public
     */
    writeProfile(): Promise<void>;
    searchConfigs(): Promise<void>;
}
//# sourceMappingURL=project.service.d.ts.map
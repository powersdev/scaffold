"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const bud_support_1 = require("@roots/bud-support");
const { isFunction, isObject } = bud_support_1.lodash;
/**
 * User config parser
 *
 * @public
 */
class Configuration {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app, manifests) {
        this.app = app;
        this.manifests = manifests;
        /**
         * Manifest
         *
         * @public
         */
        this.manifest = {};
        manifests &&
            Object.values(manifests)
                .filter(config => {
                const isBud = config?.name?.includes('bud.config');
                this.app.log('project config', config.name, isBud ? 'is a bud config' : 'is not a bud config');
                return isBud;
            })
                .map(config => {
                this.manifest[config.name] = config.module;
            });
        Object.keys(this.manifest).map(k => this.app.log(`Processing config: ${k}`));
    }
    /**
     * @public
     * @decorator `@bind`
     */
    async run() {
        await Promise.all(Object.entries(this.manifest).map(async ([name, config]) => {
            if (!isFunction(config) && !isObject(config))
                return this.app.error(`bud tried to parse ${name ?? 'unknown file'} but it doesn't seem to be a function or an object config`);
            isFunction(config)
                ? await config(this.app)
                : await this.processStatic(config);
        }));
    }
    /**
     * @public
     */
    async processStatic(config) {
        await Promise.all(Object.entries(config).map(async ([key, value]) => {
            const request = this.app[key];
            if (isFunction(request)) {
                this.app.log(key, `called on`, this.app.name);
                await request(value);
            }
        }));
    }
}
__decorate([
    bud_support_1.bind
], Configuration.prototype, "run", null);
__decorate([
    bud_support_1.bind
], Configuration.prototype, "processStatic", null);
/**
 * @public
 */
const config = async (app) => {
    const process = async (manifests) => {
        await app.api.processQueue();
        await app.extensions.processQueue();
        await new Configuration(app, manifests).run();
        await app.api.processQueue();
        await app.extensions.processQueue();
    };
    const baseConfig = app.project.get(`config.base`);
    await process(baseConfig);
    const modeSpecific = app.project.get(`config.${app.mode}`);
    await process(modeSpecific);
};
exports.config = config;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCommand = void 0;
const bud_support_1 = require("@roots/bud-support");
const clipanion_1 = require("clipanion");
const disk = __importStar(require("../config/disk.config"));
const Notifier_1 = require("../Notifier");
/**
 * Base command
 *
 * @public
 */
class BaseCommand extends clipanion_1.Command {
    /**
     * Application logger
     *
     * @public
     */
    get logger() {
        return this.app.logger.instance;
    }
    /**
     * Bootstrap Application
     *
     * @returns Bud
     */
    async make() {
        this.notifier = new Notifier_1.Notifier(this.app);
        this.app.hooks.action('event.compiler.done', this.notifier.notify);
        try {
            this.logger.time('process user configs');
            await disk.config(this.app);
            this.logger.timeEnd('process user configs');
        }
        catch (error) {
            throw new Error(error);
        }
        return this.app;
    }
    /**
     * Run the build
     *
     * @public
     */
    async run() {
        await this.app.api.call('run');
    }
}
__decorate([
    bud_support_1.bind
], BaseCommand.prototype, "make", null);
__decorate([
    bud_support_1.bind
], BaseCommand.prototype, "run", null);
exports.BaseCommand = BaseCommand;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildCommand = void 0;
const bud_support_1 = require("@roots/bud-support");
const clipanion_1 = require("clipanion");
const t = __importStar(require("typanion"));
const index_js_1 = require("../../factory/index.js");
const seed_js_1 = require("../../seed.js");
const overrides = __importStar(require("../config/override.config.js"));
const base_js_1 = require("./base.js");
const { isUndefined } = bud_support_1.lodash;
/**
 * Build command
 *
 * @public
 */
class BuildCommand extends base_js_1.BaseCommand {
    constructor() {
        super(...arguments);
        /**
         * --mode
         */
        this.mode = clipanion_1.Option.String(`--mode`, 'production', {
            description: `Compilation mode`,
            validator: t.isOneOf([
                t.isLiteral('production'),
                t.isLiteral('development'),
            ]),
            env: 'BUILD_MODE',
        });
        /**
         * --cache
         */
        this.cache = clipanion_1.Option.String(`--cache`, undefined, {
            description: `Utilize compiler's filesystem cache`,
            tolerateBoolean: true,
            validator: t.isOneOf([
                t.isLiteral('filesystem'),
                t.isLiteral('memory'),
                t.isLiteral(true),
                t.isLiteral(false),
            ]),
            env: 'BUILD_CACHE',
        });
        /**
         * --ci
         */
        this.ci = clipanion_1.Option.Boolean(`--ci`, undefined, {
            description: `Run in CI mode (disables keyboard input handlers).`,
        });
        /**
         * --clean
         */
        this.clean = clipanion_1.Option.Boolean(`--clean`, undefined, {
            description: `Clean artifacts and distributables prior to compilation`,
        });
        /**
         * --dashboard
         */
        this.dashboard = clipanion_1.Option.Boolean(`--dashboard`, undefined, {
            hidden: true,
        });
        this.debug = clipanion_1.Option.Boolean(`--debug`, false, {
            description: 'Enable debugging mode. Very verbose logging. Writes output files to `@storage` directory',
        });
        /**
         * --devtool
         */
        this.devtool = clipanion_1.Option.Boolean(`--devtool`, undefined, {
            description: `Set devtool option`,
        });
        /**
         * --flush
         */
        this.flush = clipanion_1.Option.Boolean(`--flush`, undefined, {
            description: `Force clearing bud internal cache`,
        });
        /**
         * --hash
         */
        this.hash = clipanion_1.Option.Boolean(`--hash`, undefined, {
            description: 'Hash compiled filenames',
        });
        /**
         * --html
         */
        this.html = clipanion_1.Option.Boolean(`--html`, undefined, {
            description: 'Generate an html template',
        });
        /**
         * --inject
         */
        this.inject = clipanion_1.Option.Boolean(`--inject`, undefined, {
            description: 'Automatically inject extensions',
            hidden: true,
        });
        /**
         * --src
         */
        this.src = clipanion_1.Option.String(`--input,-i`, undefined, {
            description: 'Source directory (relative to project)',
        });
        /*
         * --dist
         */
        this.dist = clipanion_1.Option.String(`--output,-o`, undefined, {
            description: 'Distribution directory (relative to project)',
        });
        /**
         * --storage
         */
        this.storage = clipanion_1.Option.String(`--storage`, undefined, {
            description: 'Storage directory (relative to project)',
            env: 'BUILD_PATH_STORAGE',
        });
        /**
         * --indicator
         */
        this.indicator = clipanion_1.Option.Boolean(`--indicator`, true, {
            description: 'Enable development status indicator',
        });
        /**
         * --log
         */
        this.log = clipanion_1.Option.Boolean(`--log`, undefined, {
            description: 'Enable logging',
        });
        /**
         * --manifest
         */
        this.manifest = clipanion_1.Option.Boolean(`--manifest`, undefined, {
            description: 'Generate a manifest of compiled assets',
        });
        /**
         * --minimize
         */
        this.minimize = clipanion_1.Option.Boolean(`--minimize`, undefined, {
            description: 'Minimize compiled assets',
        });
        /**
         * --modules
         */
        this.modules = clipanion_1.Option.String(`--modules`, undefined, {
            description: 'Module resolution path',
            env: 'BUILD_PATH_MODULES',
        });
        /**
         * --notify
         */
        this.notify = clipanion_1.Option.Boolean(`--notify`, true, {
            description: 'Enable notfication center messages',
        });
        /**
         * --overlay
         */
        this.overlay = clipanion_1.Option.Boolean(`--overlay`, true, {
            description: 'Enable error overlay in development mode',
        });
        /**
         * --publicPath
         */
        this.publicPath = clipanion_1.Option.String(`--publicPath`, undefined, {
            description: 'public path of emitted assets',
            env: 'APP_PUBLIC_PATH',
        });
        /**
         * --splitChunks
         */
        this.splitChunks = clipanion_1.Option.Boolean(`--splitChunks,--vendor`, undefined, {
            description: 'Separate vendor bundle',
        });
        /**
         * --target
         */
        this.target = clipanion_1.Option.Array(`--target,-t`, undefined, {
            description: 'Limit compilation to particular compilers',
        });
        /**
         * --verbose
         */
        this.verbose = clipanion_1.Option.Boolean(`--verbose`, false, {
            description: 'Set logging level',
        });
    }
    /**
     * Execute command
     */
    async execute() {
        if (!isUndefined(this.dashboard))
            this.context.stdout.write(`the --dashboard and --no-dashboard flags are deprecated and will be removed in a future release.\n`);
        [
            'cache',
            'ci',
            'clean',
            'debug',
            'devtool',
            'flush',
            'hash',
            'html',
            'indicator',
            'inject',
            'log',
            'manifest',
            'minimize',
            'mode',
            'modules',
            'notify',
            'overlay',
            'publicPath',
            'src',
            'splitChunks',
            'target',
            'verbose',
        ].map(arg => {
            this.context.args[arg] = isUndefined(arg) ? null : this[arg];
        });
        this.app = await (0, index_js_1.factory)({
            name: 'bud',
            mode: this.mode,
            context: this.context,
            config: {
                'build.output.publicPath': isUndefined(this.publicPath)
                    ? seed_js_1.seed['build.output.publicPath']
                    : () => this.publicPath,
                'features.inject': isUndefined(this.inject)
                    ? seed_js_1.seed['features.inject']
                    : this.inject,
                'features.log': isUndefined(this.log)
                    ? seed_js_1.seed['features.log']
                    : this.log,
                'features.manifest': isUndefined(this.manifest)
                    ? seed_js_1.seed['features.manifest']
                    : this.manifest,
                location: {
                    '@src': isUndefined(this.src) ? seed_js_1.seed.location['@src'] : this.src,
                    '@dist': isUndefined(this.dist)
                        ? seed_js_1.seed.location['@dist']
                        : this.dist,
                    '@storage': isUndefined(this.storage)
                        ? seed_js_1.seed.location['@storage']
                        : this.storage,
                    '@modules': isUndefined(this.modules)
                        ? seed_js_1.seed.location['@modules']
                        : this.modules,
                },
            },
        });
        await this.make();
        await overrides.config(this);
        await this.run();
    }
}
exports.BuildCommand = BuildCommand;
/**
 * Command paths
 *
 * @public
 */
BuildCommand.paths = [[`build`]];
/**
 * Command usage
 *
 * @public
 */
BuildCommand.usage = clipanion_1.Command.Usage({
    category: `Compile`,
    description: `Compile source assets`,
    details: `
      \`bud build\` compiles source assets from the \`@src\` directory to the \`@dist\` directory.

      Any boolean options can be negated by prefixing the flag with \`--no-\`. You can also pass a boolean
      value. Example: \`--no-cache\` and \`--cache false\` are equivalent.

      By default, the \`@src\` directory is \`[project]/src\`. You can override this with the \`-i\` flag.

      If you run this command without a bud configuration file \`bud\` will
      look for an entrypoint at \`@src/index.js\`.
    `,
    examples: [[`Compile source`, `$0 build`]],
});

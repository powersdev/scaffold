"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = void 0;
const Framework = __importStar(require("@roots/bud-framework"));
const bud_support_1 = require("@roots/bud-support");
const peers_1 = require("./peers");
const project_repository_1 = require("./project.repository");
const { isFunction, isString, omit } = bud_support_1.lodash;
const { ensureFile, writeFile } = bud_support_1.fs;
/**
 * Project service
 *
 * @public
 */
class Project extends Framework.Service {
    constructor() {
        super(...arguments);
        /**
         * Service ident
         *
         * @internal
         */
        this.ident = 'project';
        /**
         * Repository values
         *
         * @public
         */
        this.repository = project_repository_1.repository;
    }
    /**
     * Service bootstrap event
     *
     * @internal
     * @decorator `@bind`
     */
    async bootstrap() {
        this.peers = new peers_1.Peers(this.app);
        this.set('context', omit(this.app.context, ['stdin', 'stderr', 'stdout'])).set('publicEnv', this.app.env.getPublicEnv());
        await this.loadManifest();
    }
    /**
     * Service register event
     *
     * @internal
     * @decorator `@bind`
     */
    async register() {
        try {
            await this.buildProfile();
        }
        catch (e) {
            this.log('error', e);
        }
    }
    /**
     * Service boot event
     *
     * @internal
     * @decorator `@bind`
     */
    async boot() {
        await this.searchConfigs();
        this.app.hooks.action('event.build.after', async (app) => {
            await app.hooks.fire('event.project.write');
            await this.writeProfile();
        });
    }
    /**
     * Read project package.json and record peer dependencies
     *
     * @public
     * @decorator `@bind`
     */
    async resolvePeers() {
        await this.peers.discover();
        this.set('modules', this.peers.modules);
        this.set('adjacents', this.peers.adjacents.fromRoot('root'));
    }
    /**
     * Read manifest from disk
     *
     * @public
     */
    async loadManifest() {
        this.set('manifest', this.app.context.manifest).merge('installed', {
            ...(this.get('manifest.devDependencies') ?? {}),
            ...(this.get('manifest.dependencies') ?? {}),
        });
    }
    /**
     * Returns true if a dependency is listed in the project manifest
     *
     * @public
     * @decorator `@bind`
     */
    hasPeerDependency(pkg) {
        return this.has(`modules.${pkg}`);
    }
    /**
     * @public
     */
    async buildProfile() {
        await ensureFile(this.app.path(`@storage/${this.app.name}/profile.json`));
        this.log('time', 'building profile');
        try {
            await this.resolvePeers();
        }
        catch (error) {
            this.app.error(error);
        }
        this.log('timeEnd', 'building profile');
    }
    /**
     * @public
     */
    async writeProfile() {
        await ensureFile(this.app.path(`@storage/${this.app.name}/profile.json`));
        await writeFile(this.app.path(`@storage/${this.app.name}/profile.json`), (0, bud_support_1.jsonStringify)(this.repository, null, 2));
        this.log('success', {
            message: 'write profile',
            suffix: this.app.path(`@storage/${this.app.name}/profile.json`),
        });
    }
    async searchConfigs() {
        await Promise.all(Object.entries(this.app.context.disk.config).map(async ([fileName, filePath]) => {
            const doYouEvenGoHere = !filePath ||
                !isString(filePath) ||
                !fileName ||
                !isString(fileName);
            if (doYouEvenGoHere)
                throw new Error(`File object with no path or filename received from context.disk.config by project.service`);
            const hasCondition = (condition) => filePath.includes(condition);
            const hasExtension = (extension) => filePath.endsWith(extension);
            const condition = hasCondition('production')
                ? 'production'
                : hasCondition('development')
                    ? 'development'
                    : 'base';
            const rawImport = hasExtension('js') || hasExtension('ts')
                ? await Promise.resolve().then(() => __importStar(require(filePath)))
                : hasExtension('yml')
                    ? await this.app.yml.read(filePath)
                    : hasExtension('json')
                        ? await this.app.json.read(filePath)
                        : {};
            const processedModule = rawImport.default && isFunction(rawImport?.default)
                ? rawImport.default
                : rawImport;
            this.set(['config', condition, fileName], {
                name: fileName,
                path: filePath,
                module: processedModule,
            });
        }));
    }
}
__decorate([
    bud_support_1.bind
], Project.prototype, "register", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "boot", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "resolvePeers", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "loadManifest", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "hasPeerDependency", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "buildProfile", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "writeProfile", null);
__decorate([
    bud_support_1.bind
], Project.prototype, "searchConfigs", null);
exports.Project = Project;

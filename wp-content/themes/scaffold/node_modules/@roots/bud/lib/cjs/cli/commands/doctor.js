"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoctorCommand = void 0;
const bud_support_1 = require("@roots/bud-support");
const clipanion_1 = require("clipanion");
const webpack_cli_1 = __importDefault(require("webpack-cli"));
const index_js_1 = require("../../factory/index.js");
const base_js_1 = require("./base.js");
/**
 * @internal
 */
class DoctorCommand extends base_js_1.BaseCommand {
    async execute() {
        this.webpackCLI = new webpack_cli_1.default();
        this.webpack = await this.webpackCLI.loadWebpack();
        this.app = await (0, index_js_1.factory)();
        await this.make();
        await this.checkConfiguration();
    }
    async checkConfiguration() {
        try {
            const conf = await this.app.compiler.before();
            if (!conf) {
                this.app.error('config not returned from bud compiler.');
            }
            if (!Array.isArray(conf)) {
                this.logger.info('The bud compiler should always return an array.');
                this.app.error('compiler did not return an array');
            }
            this.webpack.validate(conf);
            this.context.stdout.write(bud_support_1.chalk.green(`Webpack configuration is valid\n`));
        }
        catch (error) {
            this.context.stderr.write(bud_support_1.chalk.red(`webpack configuration check returned an error\n`));
            this.app.error(error);
        }
        this.app.close();
    }
}
DoctorCommand.paths = [[`doctor`]];
DoctorCommand.usage = clipanion_1.Command.Usage({
    category: `Doctor`,
    description: `Check compiled configuration against webpack`,
    examples: [
        [`Check compiled configuration against webpack`, `$0 doctor`],
    ],
});
__decorate([
    bud_support_1.bind
], DoctorCommand.prototype, "checkConfiguration", null);
exports.DoctorCommand = DoctorCommand;

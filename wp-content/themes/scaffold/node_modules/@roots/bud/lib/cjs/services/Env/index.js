"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Env = void 0;
const bud_framework_1 = require("@roots/bud-framework");
const bud_support_1 = require("@roots/bud-support");
const { isString } = bud_support_1.lodash;
/**
 * Env service
 *
 * @public
 */
class Env extends bud_framework_1.Service {
    /**
     * Bootstrap event callback
     *
     * @internal
     * @decorator `@bind`
     */
    async bootstrap() {
        this.setStore(this.app.context.env);
    }
    /**
     * Get entries from .env which include `APP_PUBLIC` in their name
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    getPublicEnv() {
        return this.getEntries()
            .filter(this.filterPublicEnv)
            .map(this.transformPublicEnv)
            .reduce((a, [k, v]) => ({ ...a, [k]: v }), {});
    }
    /**
     * Transform public env
     *
     * @public
     * @decorator `@bind`
     */
    transformPublicEnv([rawKey, rawValue]) {
        const interpolated = rawKey.replace('PUBLIC_', '');
        const value = isString(rawValue)
            ? rawValue
            : this.app.json.stringify(rawValue);
        return [interpolated, value];
    }
    /**
     * Filter public env
     *
     * @public
     */
    filterPublicEnv([key]) {
        return key.startsWith('PUBLIC_');
    }
}
__decorate([
    bud_support_1.bind
], Env.prototype, "bootstrap", null);
__decorate([
    bud_support_1.bind
], Env.prototype, "getPublicEnv", null);
__decorate([
    bud_support_1.bind
], Env.prototype, "transformPublicEnv", null);
__decorate([
    bud_support_1.bind
], Env.prototype, "filterPublicEnv", null);
exports.Env = Env;

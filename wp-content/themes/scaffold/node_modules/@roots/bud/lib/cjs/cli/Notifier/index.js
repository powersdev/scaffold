"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notifier = void 0;
const bud_support_1 = require("@roots/bud-support");
const node_notifier_1 = require("node-notifier");
const path_1 = require("path");
class Notifier {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app) {
        this.app = app;
        this.notificationCenter = new node_notifier_1.NotificationCenter({
            customPath: this.binary,
        });
    }
    /**
     * Binary path
     *
     * @public
     */
    get binary() {
        return (0, path_1.join)(this.app.context.application.dir, 'vendor', 'mac.no-index', 'roots-notifier.app', 'Contents', 'MacOS', 'roots-notifier');
    }
    get title() {
        return this.app.compiler.stats.errorsCount > 0
            ? `✖ ${this.app.project.get('manifest.name') ?? this.app.name}`
            : `✔ ${this.app.project.get('manifest.name') ?? this.app.name}`;
    }
    get group() {
        return this.app.context.manifest.name;
    }
    get message() {
        return `\
${this.app.mode} build completed with ${this.app.compiler.stats.errorsCount} errors \
and ${this.app.compiler.stats.warningsCount} warnings`;
    }
    get open() {
        if (this.app.isProduction)
            return;
        return this.app.server.connection.url.toString();
    }
    /**
     * Emits notification
     *
     * @param app - Framework
     *
     * @public
     * @decorator `@bind`
     */
    async notify() {
        this.app.context.args.notify === true &&
            this.notificationCenter.notify({
                title: this.title,
                message: this.message,
                // @ts-ignore
                group: this.group,
                open: this.open,
            }, this.callback);
    }
    /**
     * node notifier callback
     *
     * @public
     * @decorator `@bind`
     */
    callback(error, response, metadata) {
        //  error && this.app.error(error.toString())
    }
}
__decorate([
    bud_support_1.bind
], Notifier.prototype, "notify", null);
__decorate([
    bud_support_1.bind
], Notifier.prototype, "callback", null);
exports.Notifier = Notifier;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = exports.Project = exports.Hooks = exports.Extensions = exports.Env = exports.Dependencies = exports.Dashboard = exports.Compiler = exports.Cache = exports.Build = exports.Api = exports.services = void 0;
const Api_1 = require("./Api");
Object.defineProperty(exports, "Api", { enumerable: true, get: function () { return Api_1.Api; } });
const Build_1 = require("./Build");
Object.defineProperty(exports, "Build", { enumerable: true, get: function () { return Build_1.Build; } });
const Cache_1 = require("./Cache");
Object.defineProperty(exports, "Cache", { enumerable: true, get: function () { return Cache_1.Cache; } });
const Compiler_1 = require("./Compiler");
Object.defineProperty(exports, "Compiler", { enumerable: true, get: function () { return Compiler_1.Compiler; } });
const Dashboard_1 = require("./Dashboard");
Object.defineProperty(exports, "Dashboard", { enumerable: true, get: function () { return Dashboard_1.Dashboard; } });
const Dependencies_1 = require("./Dependencies");
Object.defineProperty(exports, "Dependencies", { enumerable: true, get: function () { return Dependencies_1.Dependencies; } });
const Env_1 = require("./Env");
Object.defineProperty(exports, "Env", { enumerable: true, get: function () { return Env_1.Env; } });
const Extensions_1 = require("./Extensions");
Object.defineProperty(exports, "Extensions", { enumerable: true, get: function () { return Extensions_1.Extensions; } });
const Hooks_1 = require("./Hooks");
Object.defineProperty(exports, "Hooks", { enumerable: true, get: function () { return Hooks_1.Hooks; } });
const Project_1 = require("./Project");
Object.defineProperty(exports, "Project", { enumerable: true, get: function () { return Project_1.Project; } });
const Server_1 = require("./Server");
Object.defineProperty(exports, "Server", { enumerable: true, get: function () { return Server_1.Server; } });
/**
 * Bud application services
 *
 * @internal
 */
exports.services = {
    api: Api_1.Api,
    hooks: Hooks_1.Hooks,
    project: Project_1.Project,
    env: Env_1.Env,
    build: Build_1.Build,
    compiler: Compiler_1.Compiler,
    cache: Cache_1.Cache,
    dependencies: Dependencies_1.Dependencies,
    server: Server_1.Server,
    dashboard: Dashboard_1.Dashboard,
    extensions: Extensions_1.Extensions,
};

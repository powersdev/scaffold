import { Extension, Extensions as Base, Framework, Service } from '@roots/bud-framework';
import { Controller } from '../Controller';
/**
 * Extensions Service
 *
 * @remarks
 * Manages extension controllers
 *
 * @public
 */
export declare class Extensions extends Service implements Base {
    /**
     * Extensions queued for registration
     *
     * @public
     */
    queue: any[];
    /**
     * Controller factory
     *
     * @public
     */
    makeController(extension: Extension.Module | Promise<Extension.Module>): Controller;
    setController(extension: Extension.Module): Promise<void>;
    /**
     * @override
     * @public
     */
    booted(): Promise<void>;
    /**
     * Inject extension modules
     *
     * @public
     * @decorator `@bind`
     */
    injectExtensions(): Promise<void>;
    importExtension(extension: Record<string, any>): Promise<void>;
    /**
     * @public
     */
    registerExtension(extension: Controller): Promise<void>;
    /**
     * @public
     */
    bootExtension(extension: Controller): Promise<void>;
    /**
     * @public
     */
    registerExtensions(): Promise<void>;
    /**
     * @public
     */
    bootExtensions(): Promise<void>;
    /**
     * Add a {@link Controller} to the container
     *
     * @public
     * @decorator `@bind`
     */
    add(extension: Extension.Module): Promise<void>;
    /**
     * Queue an extension to be added to the container before the build process.
     *
     * @remarks
     * Useful for extensions which cannot be added in an awaitable context (like a user config)
     *
     * @public
     * @decorator `@bind`
     */
    enqueue(extension: Extension.Module): Framework;
    /**
     * @public
     */
    processQueue(): Promise<void>;
    /**
     * Returns an array of plugin instances which have been registered to the
     * container and are set to be used in the compilation
     *
     * @returns An array of plugin instances
     *
     * @public
     * @decorator `@bind`
     */
    make(): Promise<{
        [key: string]: any;
        apply: CallableFunction;
    }[]>;
}
//# sourceMappingURL=extensions.service.d.ts.map
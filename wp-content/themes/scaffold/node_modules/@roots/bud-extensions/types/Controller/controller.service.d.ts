import { Service } from '@roots/bud-framework';
import { Signale } from './controller.dependencies';
import { Extension, Framework, Plugin } from './controller.interface';
/**
 * Extension instance controller
 *
 * @public
 */
export declare class Controller {
    /**
     * @internal
     */
    _app: () => Framework;
    /**
     * The application instance
     *
     * @public @readonly
     */
    get app(): Framework;
    /**
     * @public
     */
    meta: {
        instance: string;
        bound: boolean;
        mixed: boolean;
        registered: boolean;
        booted: boolean;
    };
    get moduleLogger(): Signale;
    /**
     * @internal
     */
    _module: Extension | Plugin;
    /**
     * @public
     */
    log: typeof Service.prototype.log;
    /**
     * Controller constructor
     *
     * @public
     */
    constructor(_app: Framework, extension: Extension);
    /**
     * @public
     * @decorator `@bind`
     */
    get(key: string): any;
    /**
     * @public
     * @decorator `@bind`
     */
    set(key: string, value: any): void;
    /**
     * Extension module name
     *
     * @public
     */
    get name(): string;
    set name(name: string);
    /**
     * Extension module options
     *
     * @public
     */
    get options(): any;
    /**
     * @public
     */
    set options(options: any);
    /**
     * Mutate options
     *
     * @remarks
     * mutation fn receives a container of existing options and returns
     * an object or container of mutated options
     *
     * @param options - mutation fn
     * @public
     */
    mutateOptions(options: any): void;
    /**
     * Merge options
     *
     * @remarks
     * Supplied options must be an object or container of options to merge
     *
     * @param options - options to merge
     * @public
     */
    mergeOptions(options: any): void;
    /**
     * Merge option
     *
     * @remarks
     * Supplied options must be an object or container of options to merge
     *
     * @param key - option key
     * @param options - value to merge
     * @public
     */
    mergeOption(key: any, options: any): void;
    /**
     * Set an extension option
     *
     * @param key - option key
     * @param value - options value
     * @public
     */
    setOptions(value: any): Controller;
    /**
     * Set an extension option
     *
     * @param key - option key
     * @param value - options value
     * @public
     */
    setOption(key: any, value: any): void;
    /**
     * Get an extension option
     *
     * @param key - option key
     * @public
     */
    getOption(key: any): any;
    /**
     * Value determining if the extension should be utilized
     *
     * @public
     */
    make(): any;
    /**
     * Value determining if the extension should be utilized
     *
     * @public
     */
    get when(): boolean;
    /**
     * Value determining if the extension should be utilized
     *
     * @public
     */
    set when(when: boolean);
    /**
     * Extension registration event
     *
     * @remarks
     * Calls the {@link Extension} callback
     *
     * @public
     */
    register(): Promise<Controller>;
    /**
     * @public
     */
    api(): Promise<Controller>;
    /**
     * @public
     */
    mixin(): Promise<this>;
    /**
     * Extension boot event
     *
     * @remarks
     * Calls the {@link @roots/bud-framework#Module.boot} callback
     *
     * @public
     * @decorator `@bind`
     */
    boot(): Promise<this>;
}
//# sourceMappingURL=controller.service.d.ts.map
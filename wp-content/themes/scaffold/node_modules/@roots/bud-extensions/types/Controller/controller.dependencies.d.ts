import { bind, chalk, Signale } from '@roots/bud-support';
declare const isObject: (value?: any) => value is object, isUndefined: (value: any) => value is undefined, isFunction: (value: any) => value is (...args: any[]) => any, isString: (value?: any) => value is string, omit: {
    <T extends object, K extends import("lodash").PropertyName[]>(object: T, ...paths: K): Pick<T, Exclude<keyof T, K[number]>>;
    <T_1 extends object, K_1 extends keyof T_1>(object: T_1, ...paths: import("lodash").Many<K_1>[]): import("lodash").Omit<T_1, K_1>;
    <T_2 extends object>(object: T_2, ...paths: import("lodash").Many<import("lodash").PropertyName>[]): Partial<T_2>;
};
export { bind, chalk, Signale, isObject, isString, isUndefined, isFunction, omit, };
//# sourceMappingURL=controller.dependencies.d.ts.map
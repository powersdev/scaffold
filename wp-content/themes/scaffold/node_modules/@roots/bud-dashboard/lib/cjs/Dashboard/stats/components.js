"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.framework = exports.development = exports.summary = exports.timing = exports.report = exports.assetGroup = exports.time = exports.assets = exports.statics = exports.hot = exports.size = exports.chunk = exports.name = exports.status = void 0;
const bud_support_1 = require("@roots/bud-support");
const box = __importStar(require("./box.factory"));
const table = __importStar(require("./table.factory"));
const theme_1 = require("./theme");
const assetColor = asset => asset.info.error
    ? theme_1.theme.red
    : asset.info.warning
        ? theme_1.theme.yellow
        : asset.emitted
            ? theme_1.theme.green
            : theme_1.theme.dim;
const assetIcon = asset => asset.info.minimized && asset.emitted
    ? `âš¡`
    : asset.info.hotModuleReplacement
        ? `ðŸ”¥`
        : asset.emitted
            ? `âœ”`
            : asset.info.error
                ? `âœ–`
                : asset.info.warning
                    ? `âš `
                    : ` `;
const status = (asset) => bud_support_1.chalk.hex(assetColor(asset))(assetIcon(asset));
exports.status = status;
const name = asset => bud_support_1.chalk.hex(assetColor(asset))(asset.info.hotModuleReplacement
    ? (asset.info.sourceFilename ?? asset.name).split(`.`)[0]
    : asset.info.sourceFilename ?? asset.name);
exports.name = name;
const chunk = asset => bud_support_1.chalk.hex(assetColor(asset))(asset.chunkNames.length ? asset.chunkNames.join(` `) : `á ƒ`);
exports.chunk = chunk;
const size = asset => bud_support_1.chalk.hex(asset.emitted ? theme_1.theme.foregroundColor : theme_1.theme.dim)(bud_support_1.humanReadable.sizeFormatter()(asset.info.size));
exports.size = size;
const hot = compilation => compilation.assets.filter(asset => asset.name.endsWith(`.js`) && asset.name.includes(`hot-update`)) ?? [];
exports.hot = hot;
const statics = compilation => compilation.assets.filter(asset => ![`js`, `css`].includes(asset.name.split('.').pop()) &&
    !asset.name.includes(`hot-update`)) ?? [];
exports.statics = statics;
const assets = compilation => compilation.assets.filter(asset => asset.name.endsWith(`.css`) ||
    (asset.name.endsWith(`.js`) && !asset.name.includes('hot-update'))) ?? [];
exports.assets = assets;
const time = time => bud_support_1.humanReadable.durationFormatter({
    allowMultiples: ['s', 'ms'],
})(time);
exports.time = time;
const assetGroup = assets => assets?.length
    ? assets.map(asset => [
        (0, exports.status)(asset),
        (0, exports.chunk)(asset),
        (0, exports.name)(asset),
        (0, exports.size)(asset),
    ])
    : [];
exports.assetGroup = assetGroup;
const report = (compilation) => [
    table.make([
        ...(0, exports.assetGroup)((0, exports.assets)(compilation)),
        ...(0, exports.assetGroup)((0, exports.hot)(compilation)),
        ...(0, exports.assetGroup)((0, exports.statics)(compilation)),
    ].filter(Boolean)),
];
exports.report = report;
const timing = (app, compilation) => [
    table.make([
        [
            bud_support_1.chalk.hex(theme_1.theme.magenta)(`duration`),
            app.mode === 'production'
                ? `${(0, exports.time)(app._hrdone + compilation.time)} ${bud_support_1.chalk.dim(`(${(0, exports.time)(app._hrdone)} + ${(0, exports.time)(compilation.time)})`)}`
                : (0, exports.time)(compilation.time),
        ],
    ]),
];
exports.timing = timing;
const summary = (app, compilation) => [
    table.make([
        [
            bud_support_1.chalk.hex(theme_1.theme.magenta)(`mode`),
            bud_support_1.chalk.hex(theme_1.theme.foregroundColor)(app.mode),
            bud_support_1.chalk.hex(theme_1.theme.magenta)(`hash`),
            bud_support_1.chalk.hex(theme_1.theme.foregroundColor)(compilation.hash),
        ],
        [
            bud_support_1.chalk.hex(theme_1.theme.magenta)('bud'),
            bud_support_1.chalk.hex(theme_1.theme.foregroundColor)(app.project.get('installed.@roots/bud')),
            bud_support_1.chalk.hex(theme_1.theme.magenta)('webpack'),
            bud_support_1.chalk.hex(theme_1.theme.foregroundColor)(compilation.version),
        ],
    ]),
    ...(app.isDevelopment
        ? [
            table.make([
                [
                    bud_support_1.chalk.hex(theme_1.theme.magenta)(`server url:`),
                    app.server.connection.url.toString(),
                ],
                app.hooks.filter(`middleware.enabled`).includes(`proxy`)
                    ? [
                        bud_support_1.chalk.hex(theme_1.theme.magenta)(`proxy url:`),
                        app.hooks.filter(`middleware.proxy.target`).toString(),
                    ]
                    : [``, ``],
            ]),
        ]
        : []),
];
exports.summary = summary;
const development = (app) => [
    box.make('development', table.make([
        [
            bud_support_1.chalk.hex(theme_1.theme.magenta)('server'),
            app.server.connection.url.toString(),
        ],
        app.hooks.filter('middleware.enabled').includes('proxy')
            ? [
                bud_support_1.chalk.hex(theme_1.theme.magenta)('proxy'),
                app.hooks.filter('middleware.proxy.target').toString(),
            ]
            : ['', ''],
    ])),
];
exports.development = development;
const framework = (app) => [
    box.make('rules', table.make(Object.entries(app.build.rules).map(([type, rule]) => [
        bud_support_1.chalk.hex(theme_1.theme.magenta)(type),
        [...rule.getUse()?.map(use => bud_support_1.chalk.hex(theme_1.theme.cyan)(`\`${use}\``))]
            .reverse()
            .join(', '),
    ]))),
    box.make('cache', table.make([
        [
            bud_support_1.chalk.hex(theme_1.theme.magenta)(`type`),
            bud_support_1.chalk.hex(theme_1.theme.foregroundColor)(`filesystem`),
        ],
        [
            bud_support_1.chalk.hex(theme_1.theme.magenta)(`ident`),
            bud_support_1.chalk.hex(theme_1.theme.foregroundColor)(app.cache.version),
        ],
    ])),
    box.make('extensions', table.make(bud_support_1.lodash
        .chunk(app.extensions.getValues(), 2)
        .map(chunk => [
        ...chunk.map(({ name }) => `${bud_support_1.chalk.hex(theme_1.theme.cyan)(`\`${name.toLowerCase()}\``)}`),
        ...Array(1).fill(``),
    ].slice(0, 2)))),
];
exports.framework = framework;

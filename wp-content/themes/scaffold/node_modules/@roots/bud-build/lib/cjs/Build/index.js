"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Build = void 0;
const Framework = __importStar(require("@roots/bud-framework"));
const bud_support_1 = require("@roots/bud-support");
const lodash_1 = require("lodash");
const Item_1 = require("../Item");
const Loader_1 = require("../Loader");
const Rule_1 = require("../Rule");
const config = __importStar(require("./config"));
const items = __importStar(require("./items"));
const loaders = __importStar(require("./loaders"));
const rules = __importStar(require("./rules"));
const { isUndefined } = bud_support_1.lodash;
const { ensureFile, writeFile } = bud_support_1.fs;
/**
 * Webpack configuration builder class
 *
 * @public
 */
class Build extends Framework.Service {
    constructor() {
        super(...arguments);
        /**
         * @public
         */
        this.config = {};
    }
    /**
     * Service booted event
     *
     * @public
     * @decorator `@bind`
     */
    async registered() {
        this.app.hooks
            .action('event.build.before', async (app) => app.time(`build.make`))
            .hooks.action('event.build.after', async (app) => app.timeEnd(`build.make`))
            .hooks.action('event.build.after', this.writeFinalConfig);
    }
    /**
     * Make webpack configuration
     *
     * @public
     * @decorator `@bind`
     */
    async make() {
        await this.app.hooks.fire('event.build.before');
        await Promise.all([
            ['entry', true],
            ['plugins', true],
            ['resolve', true],
            ['bail'],
            ['cache'],
            ['context'],
            ['devtool'],
            ['experiments'],
            ['externals'],
            ['infrastructureLogging'],
            ['loader'],
            ['mode'],
            ['module'],
            ['name'],
            ['node'],
            ['output'],
            ['optimization'],
            ['parallelism'],
            ['performance'],
            ['profile'],
            ['recordsPath'],
            ['stats'],
            ['target'],
            ['watch'],
            ['watchOptions'],
        ]
            .map(this.memoMap)
            .filter(Boolean)
            .map(this.memoMapValue));
        await this.app.hooks.fire('event.build.after');
        return this.config;
    }
    memoMap(...args) {
        const [[key, ...rest]] = args;
        if (!this.app.hooks.has(`build.${key}`))
            return false;
        const type = rest.length && rest.shift() ? true : false;
        const count = this.app.hooks.count(`build.${key}`);
        return [key, type, count];
    }
    async memoMapValue([propKey, isAsync, _count]) {
        const propValue = isAsync === true
            ? await this.app.hooks.filterAsync(`build.${propKey}`)
            : this.app.hooks.filter(`build.${propKey}`);
        if (isUndefined(propValue))
            return;
        Object.assign(this.config, { [propKey]: propValue });
    }
    /**
     * Service register event
     *
     * @public
     * @decorator `@bind`
     */
    async register() {
        const reducer = (a, [k, v]) => ({
            ...a,
            [k]: v(this.app),
        });
        Object.assign(this, {
            loaders: this.app
                .container(loaders)
                .getEntries()
                .reduce(reducer, this.loaders),
            rules: this.app
                .container(rules)
                .getEntries()
                .reduce(reducer, this.rules),
            items: this.app
                .container(items)
                .getEntries()
                .reduce(reducer, this.items),
        });
        await config.builder.build(this.app);
    }
    /**
     * Set a rule
     *
     * @param name - rule key
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    setRule(name, options) {
        Object.assign(this.rules, { [name]: this.makeRule(options) });
        return this;
    }
    /**
     * Make a rule
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeRule(options) {
        return new Rule_1.Rule(() => this.app, options);
    }
    /**
     * Set a rule
     *
     * @param name - rule key
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    setLoader(name, options) {
        Object.assign(this.loaders, { [name]: this.makeLoader(options) });
        return this;
    }
    /**
     * Make a rule
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeLoader(options) {
        return new Loader_1.Loader(() => this.app, options);
    }
    /**
     * Set a rule
     *
     * @param name - rule key
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    setItem(name, options) {
        const processedOptions = (0, lodash_1.isFunction)(options)
            ? options(this.makeItem())
            : this.makeItem(options);
        Object.assign(this.items, { [name]: processedOptions });
        return this;
    }
    /**
     * Make a rule
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeItem(options) {
        return new Item_1.Item(() => this.app, options);
    }
    /**
     * Write final configuration to storage directory
     *
     * @public
     * @decorator `@bind`
     */
    async writeFinalConfig() {
        try {
            const filePath = this.app.path(`@storage/${this.config.name}/webpack.config.js`);
            await ensureFile(filePath);
            await writeFile(filePath, `module.exports = ${this.app.json.stringify(this.config, null, 2)}`);
        }
        catch (error) {
            this.app.error(`failed to write webpack.config.json`);
        }
    }
}
__decorate([
    bud_support_1.bind
], Build.prototype, "registered", null);
__decorate([
    bud_support_1.bind
], Build.prototype, "make", null);
__decorate([
    bud_support_1.bind
], Build.prototype, "memoMap", null);
__decorate([
    bud_support_1.bind,
    (0, bud_support_1.memo)()
], Build.prototype, "memoMapValue", null);
__decorate([
    bud_support_1.bind
], Build.prototype, "register", null);
__decorate([
    bud_support_1.bind
], Build.prototype, "setRule", null);
__decorate([
    bud_support_1.bind
], Build.prototype, "makeRule", null);
__decorate([
    bud_support_1.bind
], Build.prototype, "setLoader", null);
__decorate([
    bud_support_1.bind
], Build.prototype, "makeLoader", null);
__decorate([
    bud_support_1.bind
], Build.prototype, "setItem", null);
__decorate([
    bud_support_1.bind
], Build.prototype, "makeItem", null);
__decorate([
    bud_support_1.bind
], Build.prototype, "writeFinalConfig", null);
exports.Build = Build;

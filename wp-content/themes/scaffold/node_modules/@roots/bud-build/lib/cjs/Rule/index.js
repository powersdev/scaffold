"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
const bud_support_1 = require("@roots/bud-support");
const Base_1 = require("../shared/Base");
const { isFunction, isString } = bud_support_1.lodash;
/**
 * Framework Rule
 *
 * @public
 */
class Rule extends Base_1.Base {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app, options) {
        super(_app);
        if (!options)
            return;
        options.test && this.setTest(options.test);
        options.use && this.setUse(options.use);
        options.include && this.setInclude(options.include);
        options.exclude && this.setExclude(options.exclude);
        options.type && this.setType(options.type);
        options.parser && this.setParser(options.parser);
        options.generator && this.setGenerator(options.generator);
    }
    /**
     * Test value
     *
     * @param app - Framework instance
     *
     * @public
     * @decorator `@bind`
     */
    getTest() {
        return this.unwrap(this.test);
    }
    /**
     * Set test value
     *
     * @public
     * @decorator `@bind`
     */
    setTest(test) {
        this.test = this.wrap(test);
        return this;
    }
    /**
     * Get parser value
     *
     * @public
     * @decorator `@bind`
     */
    getParser() {
        return this.unwrap(this.parser);
    }
    /**
     * Set parser value
     *
     * @public
     * @decorator `@bind`
     */
    setParser(parser) {
        this.parser = this.wrap(parser);
        return this;
    }
    /**
     * Get use value
     *
     * @public
     * @decorator `@bind`
     */
    getUse() {
        return this.unwrap(this.use)?.filter(isString) ?? [];
    }
    /**
     * Set use value
     *
     * @public
     * @decorator `@bind`
     */
    setUse(input) {
        this.use =
            (isFunction(input) ? input(this.getUse() ?? [], this.app) : input) ??
                [];
        return this;
    }
    /**
     * Get exclude value
     *
     * @public
     * @decorator `@bind`
     */
    getInclude() {
        return this.unwrap(this.include);
    }
    /**
     * Set exclude value
     *
     * @public
     * @decorator `@bind`
     */
    setInclude(include) {
        this.include = this.wrap(include);
        return this;
    }
    /**
     * Get exclude value
     *
     * @public
     * @decorator `@bind`
     */
    getExclude() {
        return this.unwrap(this.exclude);
    }
    /**
     * Set exclude value
     *
     * @public
     * @decorator `@bind`
     */
    setExclude(exclude) {
        this.exclude = this.wrap(exclude);
        return this;
    }
    /**
     * Get type value
     *
     * @public
     * @decorator `@bind`
     */
    getType() {
        return this.unwrap(this.type);
    }
    /**
     * Set type value
     *
     * @public
     * @decorator `@bind`
     */
    setType(type) {
        this.type = this.wrap(type);
        return this;
    }
    /**
     * Get generator value
     *
     * @public
     * @decorator `@bind`
     */
    getGenerator() {
        return this.unwrap(this.generator);
    }
    /**
     * Set generator value
     *
     * @public
     * @decorator `@bind`
     */
    setGenerator(generator) {
        this.generator = this.wrap(generator);
        return this;
    }
    /**
     * Produce final Base output
     *
     * @param app - {@link @roots/bud-framework#Framework}
     * @returns finalized rule
     *
     * @public
     * @decorator `@bind`
     */
    toWebpack() {
        const output = { test: this.getTest() };
        this.use &&
            Object.assign(output, {
                use: this.getUse().map(item => this.app.build.items[item].toWebpack()),
            });
        this.include && Object.assign(output, { include: this.getInclude() });
        this.exclude && Object.assign(output, { exclude: this.getExclude() });
        this.type && Object.assign(output, { type: this.getType() });
        this.parser && Object.assign(output, { parser: this.getParser() });
        this.generator &&
            Object.assign(output, { generator: this.getGenerator() });
        return output;
    }
}
__decorate([
    bud_support_1.bind
], Rule.prototype, "getTest", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "setTest", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "getParser", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "setParser", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "getUse", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "setUse", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "getInclude", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "setInclude", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "getExclude", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "setExclude", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "getType", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "setType", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "getGenerator", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "setGenerator", null);
__decorate([
    bud_support_1.bind
], Rule.prototype, "toWebpack", null);
exports.Rule = Rule;

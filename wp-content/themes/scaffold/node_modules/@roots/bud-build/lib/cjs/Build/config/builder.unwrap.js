"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrap = void 0;
const bud_support_1 = require("@roots/bud-support");
const { isUndefined } = bud_support_1.lodash;
/**
 * Unwrap initialValue
 *
 * @remarks
 * Returns the initializing value for a hook
 * If the value is available from {@link Framework.store}, the store value is used.
 * Otherwise, it will return the fallback value (if supplied)
 *
 * @param this - Application
 * @param key - store key
 * @param fallback - fallback value
 * @returns hook function
 *
 * @public
 */
function unwrap(key, fallback) {
    return (value) => {
        const initValue = this.store.has(key)
            ? this.maybeCall(this.store.get(key))
            : value;
        if (!isUndefined(initValue)) {
            return initValue;
        }
        if (!isUndefined(fallback)) {
            return fallback;
        }
        return undefined;
    };
}
exports.unwrap = unwrap;

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Item = void 0;
const bud_support_1 = require("@roots/bud-support");
const Base_1 = require("../shared/Base");
/**
 * Item class
 *
 * @public
 */
class Item extends Base_1.Base {
    /**
     * Class constructor
     *
     * @param options - {@link Contract.Options}
     */
    constructor(_app, options) {
        super(_app);
        options?.loader && this.setLoader(options.loader);
        options?.options && this.setOptions(options.options);
    }
    /**
     * {@inheritDoc @roots/Framework-Framework#Item.Abstract.getLoader}
     *
     * @public
     * @decorator `@bind`
     */
    getLoader() {
        return this.app.build.loaders[this.unwrap(this.loader)];
    }
    /**
     * @public
     * @decorator `@bind`
     */
    setLoader(loader) {
        this.loader = loader;
        return this;
    }
    /**
     * @public
     * @decorator `@bind`
     */
    setOptions(options) {
        this.options = this.wrap(options);
        return this;
    }
    getOptions() {
        return this.unwrap(this.options);
    }
    /**
     * @public
     * @decorator `@bind`
     */
    mergeOptions(options) {
        options = {
            ...(this.getOptions() ?? {}),
            ...options,
        };
        this.setOptions(options);
        return this;
    }
    /**
     * @public
     * @decorator `@bind`
     */
    toWebpack() {
        const loader = this.getLoader();
        if (!loader)
            this.app.error(loader, `missing`, this);
        const output = {
            loader: this.getLoader().getSrc(),
        };
        if (this.options) {
            output.options = this.getOptions();
        }
        return output;
    }
}
__decorate([
    bud_support_1.bind
], Item.prototype, "getLoader", null);
__decorate([
    bud_support_1.bind
], Item.prototype, "setLoader", null);
__decorate([
    bud_support_1.bind
], Item.prototype, "setOptions", null);
__decorate([
    bud_support_1.bind
], Item.prototype, "getOptions", null);
__decorate([
    bud_support_1.bind
], Item.prototype, "mergeOptions", null);
__decorate([
    bud_support_1.bind
], Item.prototype, "toWebpack", null);
exports.Item = Item;

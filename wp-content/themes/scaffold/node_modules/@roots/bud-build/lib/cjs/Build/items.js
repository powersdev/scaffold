"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xml = exports.resolveUrl = exports.file = exports.raw = exports.precss = exports.minicss = exports.md = exports.style = exports.html = exports.csv = exports.cssModule = exports.css = void 0;
/**
 * .css handler factory
 *
 * @public
 */
const css = (app) => app.build
    .makeItem()
    .setLoader(`css`)
    .setOptions(({ hooks }) => ({
    importLoaders: 1,
    sourceMap: hooks.filter('build.devtool') ? true : false,
}));
exports.css = css;
/**
 * .css handler factory
 *
 * @public
 */
const cssModule = (app) => app.build
    .makeItem()
    .setLoader(`css`)
    .setOptions(({ hooks }) => ({
    importLoaders: 1,
    localIdentName: '[name]__[local]___[hash:base64:5]',
    modules: true,
    sourceMap: hooks.filter('build.devtool') ? true : false,
}));
exports.cssModule = cssModule;
/**
 * .csv handler factory
 *
 * @public
 */
const csv = (app) => app.build.makeItem().setLoader(`csv`);
exports.csv = csv;
/**
 * .html handler factory
 *
 * @public
 */
const html = (app) => app.build.makeItem().setLoader(`html`);
exports.html = html;
/**
 * Factory {@link Item} for style
 *
 * @public
 */
const style = (app) => app.build.makeItem().setLoader(`style`);
exports.style = style;
/**
 * Factory {@link Item} for markdown
 *
 * @public
 */
const md = (app) => app.build.makeItem({ loader: 'md' });
exports.md = md;
/**
 * Factory {@link Item} for minicss-extract-plugin
 * @public
 */
const minicss = (app) => app.build.makeItem().setLoader(`minicss`);
exports.minicss = minicss;
/**
 * CSS rule which accounts for env
 * @public
 */
const precss = (app) => app.build.makeItem().setLoader(app.isProduction ? `minicss` : `style`);
exports.precss = precss;
const raw = ({ build }) => build.makeItem().setLoader(`raw`);
exports.raw = raw;
/**
 * Factory {@link Item} for file
 *
 * @public
 */
const file = (app) => app.build
    .makeItem()
    .setLoader(`file`)
    .setOptions(app => ({
    name: app.store.is('features.hash', true)
        ? app.store.get('hashFormat').concat('.[ext]')
        : app.store.get('fileFormat').concat('.[ext]'),
}));
exports.file = file;
/**
 * Factory {@link Item} resolve-url
 *
 * @public
 */
const resolveUrl = (app) => app.build
    .makeItem()
    .setLoader(`resolveUrl`)
    .setOptions(({ path, hooks }) => ({
    root: path('@src'),
    sourceMap: hooks.filter('build.devtool') ? true : false,
}));
exports.resolveUrl = resolveUrl;
/**
 * Factory {@link Item} for xml
 *
 * @public
 */
const xml = (app) => app.build.makeItem().setLoader(`xml`);
exports.xml = xml;

import { Framework, Items, Rule as Contract } from '@roots/bud-framework';
import { Base } from '../shared/Base';
export declare namespace Rule {
    type ConstructorOptions = Partial<Contract.Options>;
}
/**
 * Framework Rule
 *
 * @public
 */
export declare class Rule extends Base implements Contract {
    /**
     * {@inheritDoc @roots/bud-framework#Rule.Abstract.test}
     *
     * @public
     */
    test: Contract['test'];
    /**
     * {@inheritDoc @roots/bud-framework#Rule.Abstract.use}
     *
     * @public
     */
    use?: Array<keyof Items & string>;
    /**
     * Include paths
     */
    include?: Contract['include'];
    /**
     * {@inheritDoc @roots/bud-framework#Rule.Abstract.exclude}
     *
     * @public
     */
    exclude?: Contract['exclude'];
    /**
     * {@inheritDoc @roots/bud-framework#Rule.Abstract."type"}
     *
     * @public
     */
    type?: Contract['type'];
    /**
     * Generator factory
     *
     * @public
     */
    parser?: Contract['parser'];
    /**
     * Generator factory
     *
     * @public
     */
    generator?: Contract['generator'];
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app: () => Framework, options?: Contract.Options);
    /**
     * Test value
     *
     * @param app - Framework instance
     *
     * @public
     * @decorator `@bind`
     */
    getTest(): RegExp;
    /**
     * Set test value
     *
     * @public
     * @decorator `@bind`
     */
    setTest(test: Rule['test']): Rule;
    /**
     * Get parser value
     *
     * @public
     * @decorator `@bind`
     */
    getParser(): Contract.Parser;
    /**
     * Set parser value
     *
     * @public
     * @decorator `@bind`
     */
    setParser(parser: Contract['parser']): Rule;
    /**
     * Get use value
     *
     * @public
     * @decorator `@bind`
     */
    getUse(): Array<`${keyof Items & string}`>;
    /**
     * Set use value
     *
     * @public
     * @decorator `@bind`
     */
    setUse(input: Array<keyof Items & string> | ((use: Array<keyof Items & string>, app: Framework) => Array<keyof Items & string>)): Rule;
    /**
     * Get exclude value
     *
     * @public
     * @decorator `@bind`
     */
    getInclude(): Array<string | RegExp>;
    /**
     * Set exclude value
     *
     * @public
     * @decorator `@bind`
     */
    setInclude(include: Contract['include']): Rule;
    /**
     * Get exclude value
     *
     * @public
     * @decorator `@bind`
     */
    getExclude(): Array<string | RegExp>;
    /**
     * Set exclude value
     *
     * @public
     * @decorator `@bind`
     */
    setExclude(exclude: Contract['exclude']): Rule;
    /**
     * Get type value
     *
     * @public
     * @decorator `@bind`
     */
    getType(): string;
    /**
     * Set type value
     *
     * @public
     * @decorator `@bind`
     */
    setType(type: any): Rule;
    /**
     * Get generator value
     *
     * @public
     * @decorator `@bind`
     */
    getGenerator(): any;
    /**
     * Set generator value
     *
     * @public
     * @decorator `@bind`
     */
    setGenerator(generator: Contract['generator']): Rule;
    /**
     * Produce final Base output
     *
     * @param app - {@link @roots/bud-framework#Framework}
     * @returns finalized rule
     *
     * @public
     * @decorator `@bind`
     */
    toWebpack(): {
        test: RegExp;
    };
}
//# sourceMappingURL=index.d.ts.map
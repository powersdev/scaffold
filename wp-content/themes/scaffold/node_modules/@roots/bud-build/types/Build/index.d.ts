import * as Framework from '@roots/bud-framework';
import type { Configuration } from 'webpack';
import { Item } from '../Item';
import { Loader } from '../Loader';
import { Rule } from '../Rule';
/**
 * Webpack configuration builder class
 *
 * @public
 */
export declare class Build extends Framework.Service implements Framework.Build {
    /**
     * @public
     */
    config: Partial<Configuration>;
    /**
     * Registered loaders
     *
     * @public
     */
    loaders: Framework.Loaders;
    /**
     * Registered rules
     *
     * @public
     */
    rules: Framework.Rules;
    /**
     * Registered items
     *
     * @public
     */
    items: Framework.Items;
    /**
     * Service booted event
     *
     * @public
     * @decorator `@bind`
     */
    registered(): Promise<void>;
    /**
     * Make webpack configuration
     *
     * @public
     * @decorator `@bind`
     */
    make(): Promise<Configuration>;
    memoMap(...args: [value: (string | boolean)[]]): false | (string | number | boolean)[];
    memoMapValue([propKey, isAsync, _count]: [
        keyof Configuration,
        boolean,
        number
    ]): Promise<void>;
    /**
     * Service register event
     *
     * @public
     * @decorator `@bind`
     */
    register(): Promise<void>;
    /**
     * Set a rule
     *
     * @param name - rule key
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    setRule(name: string, options?: Framework.Rule.Options): Build;
    /**
     * Make a rule
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeRule(options?: Framework.Rule.Options): Rule;
    /**
     * Set a rule
     *
     * @param name - rule key
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    setLoader(name: string, options: string): Build;
    /**
     * Make a rule
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeLoader(options: string): Loader;
    /**
     * Set a rule
     *
     * @param name - rule key
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    setItem(name: string, options: ((item: Framework.Item) => Framework.Item) | Framework.Item.ConstructorOptions): Build;
    /**
     * Make a rule
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeItem(options?: {
        options?: Item['options'];
        loader?: Item['loader'];
    }): Item;
    /**
     * Write final configuration to storage directory
     *
     * @public
     * @decorator `@bind`
     */
    writeFinalConfig(): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = void 0;
const Framework = __importStar(require("@roots/bud-framework"));
const bud_support_1 = require("@roots/bud-support");
const crypto_1 = require("crypto");
/**
 * Cache service class
 *
 * @public
 */
class Cache extends Framework.Service {
    constructor() {
        super(...arguments);
        /**
         * Enabled
         *
         * @public
         */
        this.enabled = true;
    }
    get name() {
        return this.app.hooks.filter('build.cache.name');
    }
    set name(name) {
        this.app.hooks.on('build.cache.name', name);
    }
    get type() {
        return this._type;
    }
    set type(type) {
        this._type = type;
    }
    get version() {
        return this._version;
    }
    set version(version) {
        this._version = version;
    }
    /**
     * Build dependencies
     *
     * @public
     */
    get buildDependencies() {
        return {
            bud: Object.values(this.app.context.disk.config),
        };
    }
    set buildDependencies(deps) {
        this.app.context.disk.config = deps;
    }
    get cacheDirectory() {
        return this._cacheDirectory;
    }
    set cacheDirectory(directory) {
        this._cacheDirectory = directory;
    }
    get managedPaths() {
        return this._managedPaths;
    }
    set managedPaths(paths) {
        this._managedPaths = paths;
    }
    /**
     * Webpack configuration
     *
     * @public
     */
    get configuration() {
        if (this.enabled === false)
            return this.enabled;
        return this.type === 'memory' ? this.memoryCache : this.filesystemCache;
    }
    /**
     * Memory cache
     *
     * @public
     */
    get memoryCache() {
        return {
            type: this.type,
        };
    }
    /**
     * Filesystem cache
     *
     * @public
     */
    get filesystemCache() {
        return {
            name: this.name,
            type: this.type,
            version: this.version,
            cacheDirectory: this.cacheDirectory,
            managedPaths: this.managedPaths,
            buildDependencies: this.buildDependencies,
        };
    }
    async boot() {
        this.type = 'filesystem';
        this.cacheDirectory = this.app.path(`@storage/cache/webpack`);
        this.managedPaths = [this.app.path(`@modules`)];
        this.name = `${this.app.name}.${this.app.mode}`;
        if (this.app.context.args.flush === true) {
            await bud_support_1.fs.remove(this.app.path(`@storage/cache`));
        }
        const args = Object.entries(this.app.context.args)
            .filter(([k, v]) => v !== undefined)
            .map(([k, v]) => `${k}-${v}`)
            .join(`.`);
        this.version = (0, crypto_1.createHash)(`sha1`)
            .update(this.app.json.stringify([this.app.context.disk.config, args]))
            .digest(`base64`)
            .replace(/[^a-z0-9]/gi, `_`)
            .toLowerCase();
    }
}
__decorate([
    bud_support_1.bind
], Cache.prototype, "boot", null);
exports.Cache = Cache;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.method = exports.disableMiddleware = exports.enableMiddleware = void 0;
const bud_support_1 = require("@roots/bud-support");
const { isBoolean, isString, isUndefined, isNumber } = bud_support_1.lodash;
/**
 * Enables proxy middleware
 *
 * @remarks
 * If proxy middleware is already enabled it will be removed before it is re-added
 *
 * @public
 */
const enableMiddleware = (middleware) => [
    ...((0, exports.disableMiddleware)(middleware) ?? []),
    'cookie',
    'proxy',
];
exports.enableMiddleware = enableMiddleware;
const disableMiddleware = (middleware) => middleware?.filter(middleware => middleware !== 'proxy' && middleware !== 'cookie') ?? [];
exports.disableMiddleware = disableMiddleware;
const method = function (input) {
    const ctx = this;
    if (!ctx.isDevelopment)
        return ctx;
    if (isUndefined(input)) {
        return ctx.hooks.on('middleware.enabled', exports.enableMiddleware);
    }
    if (isBoolean(input)) {
        return ctx.hooks.on('middleware.enabled', input ? exports.enableMiddleware : exports.disableMiddleware);
    }
    ctx.hooks.on('middleware.enabled', exports.enableMiddleware);
    if (isNumber(input)) {
        return ctx.hooks.on('middleware.proxy.target', url => {
            url.port = `${input}`;
            return url;
        });
    }
    if (isString(input)) {
        return ctx.hooks.on('middleware.proxy.target', new URL(input));
    }
    if (input instanceof URL) {
        return ctx.hooks.on('middleware.proxy.target', input);
    }
};
exports.method = method;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.method = void 0;
const bud_support_1 = require("@roots/bud-support");
const { isUndefined } = bud_support_1.lodash;
/**
 * bud.serve
 * @public
 */
const method = async function (options) {
    const app = this;
    if (!app.isDevelopment)
        return app;
    if (Array.isArray(options) || typeof options === 'number') {
        assignNumberArr(app, 'dev.port', options);
        return app;
    }
    if (options instanceof URL || typeof options === 'string') {
        assignURL(app, options);
        return app;
    }
    await assignSpec(app, options);
    return app;
};
exports.method = method;
/**
 * Process specification object
 * @public
 */
const assignSpec = async (app, spec) => {
    const isSSL = [
        spec.ssl === true,
        spec.cert,
        spec.key,
        spec.options?.cert,
        spec.options?.key,
        spec.host?.startsWith('https'),
    ].filter(Boolean).length > 0;
    if (isSSL) {
        if (!spec.options)
            spec.options = {};
        if (!spec.options.cert && spec.cert)
            spec.options.cert = await bud_support_1.fs.readFile(spec.cert);
        if (!spec.options.key && spec.key)
            spec.options.key = await bud_support_1.fs.readFile(spec.key);
        app.hooks.on('dev.ssl', true);
    }
    if (!isUndefined(spec.ssl))
        app.hooks.on('dev.ssl', spec.ssl);
    spec.options && app.hooks.on('dev.options', spec.options);
    spec.interface && app.hooks.on('dev.interface', spec.interface);
    spec.port && assignNumberArr(app, 'dev.port', spec.port);
    spec.exclude && assignNumberArr(app, 'dev.exclude', spec.exclude);
    spec.host && assignHostname(app, spec.host);
};
/**
 * Process Node URL
 * @public
 */
const assignURL = (app, url) => {
    url = url instanceof URL ? url : new URL(url);
    app.hooks.on('dev.hostname', url.hostname);
    url.port && app.hooks.on('dev.port', [Number(url.port)]);
    app.hooks.on('dev.ssl', url.protocol === 'https:');
};
/**
 * Assign nummber or array of numbers to either dev.exclude or dev.port
 *
 * @remarks
 * normalized to array
 *
 * @public
 */
const assignNumberArr = (app, key, maybeNumber) => {
    app.hooks.on(key, Array.isArray(maybeNumber) ? maybeNumber : [maybeNumber]);
};
/**
 * Assign hostname from string
 *
 * @param app - Framework
 * @param hostname - string hostname
 * @public
 */
const assignHostname = (app, hostname) => {
    app.hooks.on('dev.hostname', hostname.replace('http:', '').replace('https:', '').replace('/', ''));
};

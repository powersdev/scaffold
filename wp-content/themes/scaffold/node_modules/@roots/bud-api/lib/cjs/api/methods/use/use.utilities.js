"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateName = exports.hasValidConstructorName = exports.isCompilerPlugin = void 0;
const use_dependencies_1 = require("./use.dependencies");
/**
 * Returns true if extensions appears to be a WebpackPlugin constructor
 *
 * @param extensions - Extensions to check
 * @returns True if extensions appears to be a WebpackPlugin constructor
 *
 * @example
 * ```ts
 * isCompilerPlugin(new WebpackPlugin())
 * // => true
 * ```
 *
 * @internal
 */
const isCompilerPlugin = (extension) => extension.apply &&
    (0, use_dependencies_1.isFunction)(extension.apply) &&
    !(0, use_dependencies_1.isEqual)(extension.apply.toString(), '[native code]');
exports.isCompilerPlugin = isCompilerPlugin;
/**
 * Returns true if extensions appears to have a valid name
 *
 * @param extensions - Extensions to check
 * @returns True if extensions appears to have a valid name
 *
 * @example
 * ```ts
 * isValidName(new WebpackPlugin())
 * // => true
 * ```
 *
 * @internal
 */
const hasValidConstructorName = (input) => input?.constructor?.name &&
    typeof input.constructor.name == 'string' &&
    input.constructor.name !== 'default' &&
    input.constructor.name !== 'Object';
exports.hasValidConstructorName = hasValidConstructorName;
/**
 * Generates a unique name for extensions which do not
 * have a name prop or constructor name
 *
 * @param extensions - Extensions to check
 * @returns Unique name for extensions which do not
 * have a name prop or constructor name
 *
 * @example
 * ```ts
 * generateUniqueName(new WebpackPlugin())
 * // => 'x1240_234j__11f...'
 * ```
 *
 * @internal
 */
const generateName = (input) => ((0, exports.hasValidConstructorName)(input) ? input.constructor.name : (0, use_dependencies_1.nanoid)(4));
exports.generateName = generateName;

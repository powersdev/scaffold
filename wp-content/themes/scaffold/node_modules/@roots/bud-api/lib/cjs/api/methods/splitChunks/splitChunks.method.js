"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitChunks = void 0;
const bud_support_1 = require("@roots/bud-support");
const defaultGroups = __importStar(require("./groups"));
const { isUndefined } = bud_support_1.lodash;
/**
 * Bundle vendor modules separately from application code.
 *
 * @example
 * Enable chunk splitting
 *
 * ```js
 * bud.splitChunks()
 * ```
 *
 * @example
 * Disable chunk splitting
 *
 * ```js
 * bud.splitChunks(false)
 * ```
 *
 * @example
 * Merge optimization.splitChunks object
 *
 * ```js
 * bud.splitChunks({chunks: 'all'})
 * ```
 *
 * @public
 */
const splitChunks = function (options) {
    const ctx = this;
    /**
     * For `true` and `undefined` options the default
     * cache groups are added to the build
     */
    if (isUndefined(options) || options === true) {
        ctx.hooks.on('build.optimization.splitChunks', splitChunksFilterValue => ({
            ...(splitChunksFilterValue ?? {}),
            cacheGroups: {
                ...(splitChunksFilterValue?.cacheGroups ?? {}),
                ...defaultGroups,
            },
        }));
        return ctx;
    }
    /**
     * A `false` value indicates that the user wishes to
     * disable chunking. Passing `undefined` to a `build.` hook
     * will omit it from the configuration entirely.
     */
    if (options === false) {
        ctx.hooks.on('build.optimization.splitChunks', undefined);
        return ctx;
    }
    /**
     * The remaining possibilty is an options object.
     *
     * In this case the passed options are spread onto the existing ones.
     *
     * For deeper merging the user can call `build.optimization.splitChunks`
     * hook themselves.
     */
    ctx.hooks.on('build.optimization.splitChunks', splitChunksFilterValue => ({
        ...(splitChunksFilterValue ?? {}),
        ...(options ?? {}),
        cacheGroups: {
            ...(splitChunksFilterValue?.cacheGroups ?? {}),
            ...defaultGroups,
            ...(options.cacheGroups ?? {}),
        },
    }));
    return ctx;
};
exports.splitChunks = splitChunks;

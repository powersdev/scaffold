"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const Framework = __importStar(require("@roots/bud-framework"));
const bud_support_1 = require("@roots/bud-support");
const facade = __importStar(require("./facade"));
const methods = __importStar(require("./methods"));
const { isEmpty, isFunction } = bud_support_1.lodash;
/**
 * API service
 *
 * @remarks
 * Binds facade methods to the framework and provides a way to list them,
 * call them, and otherwise manipulate them.
 *
 * @public
 */
class Api extends Framework.Service {
    constructor() {
        super(...arguments);
        /**
         * Queued method calls
         *
         * @internal
         */
        this.queue = [];
        /**
         * Trace of all method calls
         *
         * @internal
         */
        this.trace = [];
    }
    /**
     * Service bootstrap event
     *
     * @internal
     */
    async bootstrap() {
        this.setStore(Object.entries(methods).reduce((a, [k, v]) => ({ ...a, [k]: v.bind(this.app) }), {}))
            .getKeys()
            .map(this.bindFacade);
    }
    /**
     * Service registered event
     *
     * @internal
     */
    async registered() {
        await this.processQueue();
        this.app.hooks.action('event.build.before', this.processQueue);
    }
    /**
     * @internal
     */
    bindFacade(name) {
        this.app.bindMethod({ [`${name}`]: facade.factory(name) });
    }
    /**
     * Call an api method directly
     *
     * @public
     */
    async call(name, ...args) {
        this.log('log', {
            message: `executing ${bud_support_1.chalk.blue(name)}`,
            suffix: args && !isEmpty(args) ? this.app.json.stringify(args) : 'none',
        });
        // get a reference to the callable
        const method = this.get(name);
        // check if the callable exists
        if (!isFunction(method)) {
            throw new Error(`${name} is not a method`);
        }
        // execute the callable
        return await method(...args);
    }
    /**
     * Execute all queued method calls
     *
     * @public
     */
    async processQueue() {
        if (!this.queue.length)
            return;
        this.log('await', `Executing ${this.queue.length} enqueued functions`);
        await Promise.all(this.queue.map(async ([name, args]) => {
            this.trace.push([name, ...args]);
            try {
                await this.call(name, ...args);
            }
            catch (error) {
                throw new Error(error);
            }
        }));
        this.queue = [];
    }
    /**
     * Dump the method call trace
     *
     * @public
     */
    dump() {
        this.app.dump(this.trace.reduce((a, t) => [
            ...a,
            {
                method: t[0],
                arguments: isEmpty(t[1]) ? 'none' : t[1],
            },
        ], []), {
            prefix: `${this.app.name} config traced calls`,
            printBasicPrototype: false,
            callToJSON: true,
            min: true,
        });
    }
}
__decorate([
    bud_support_1.bind
], Api.prototype, "bootstrap", null);
__decorate([
    bud_support_1.bind
], Api.prototype, "registered", null);
__decorate([
    bud_support_1.bind
], Api.prototype, "bindFacade", null);
__decorate([
    bud_support_1.bind
], Api.prototype, "call", null);
__decorate([
    bud_support_1.bind
], Api.prototype, "processQueue", null);
__decorate([
    bud_support_1.bind
], Api.prototype, "dump", null);
exports.Api = Api;

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterpolateHtmlPlugin = void 0;
const bud_support_1 = require("@roots/bud-support");
const html_webpack_plugin_plugin_1 = require("./html-webpack-plugin.plugin");
/**
 * Template variable interpolation plugin for {@link webpack}
 *
 * @public
 */
class InterpolateHtmlPlugin {
    /**
     * Class constructor
     *
     * @param htmlWebpackPlugin - {@link HtmlWebpackPlugin}
     * @param replacements - {@link Index} of regular expressions
     *
     * @public
     */
    constructor(htmlWebpackPlugin, replacements, bud) {
        this.htmlWebpackPlugin = htmlWebpackPlugin;
        this.replacements = replacements;
        /**
         * {@link WebpackPluginInstance.name}
         *
         * @public
         */
        this.name = 'interpolate-html-plugin';
        if (bud) {
            this.bud = () => bud;
        }
    }
    /**
     * {@link WebpackPluginInstance.apply}
     *
     * @public
     * @decorator `@bind`
     */
    apply(compiler) {
        compiler.hooks.compilation.tap('InterpolateHtmlPlugin', this.modifyHtmlWebpackPluginOptions);
    }
    /**
     * @param compilation - {@link Compilation}
     *
     * @public
     * @decorator `@bind`
     */
    modifyHtmlWebpackPluginOptions(compilation) {
        html_webpack_plugin_plugin_1.HtmlWebpackPlugin.getHooks(compilation).afterTemplateExecution.tap('InterpolateHtmlPlugin', (data) => {
            this.bud().dump(this.replacements, {
                prefix: 'template replacements',
                language: 'html',
                callToJSON: false,
            });
            this.bud().dump(data.html, {
                prefix: 'html data',
                language: 'html',
                callToJSON: false,
            });
            Object.entries(this.replacements).forEach(([key, value]) => {
                data.html = data.html.replaceAll(new RegExp(`%${key}%`, 'g'), value);
            });
            this.bud().dump(data.html, {
                prefix: 'html with replacements',
                language: 'html',
                callToJSON: false,
                escapeString: false,
            });
            return data;
        });
    }
}
__decorate([
    bud_support_1.bind
], InterpolateHtmlPlugin.prototype, "apply", null);
__decorate([
    bud_support_1.bind
], InterpolateHtmlPlugin.prototype, "modifyHtmlWebpackPluginOptions", null);
exports.InterpolateHtmlPlugin = InterpolateHtmlPlugin;

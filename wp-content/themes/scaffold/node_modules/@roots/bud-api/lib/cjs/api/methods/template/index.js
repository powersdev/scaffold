"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.template = void 0;
const bud_support_1 = require("@roots/bud-support");
const path_1 = require("path");
const html_webpack_plugin_extension_1 = require("./html-webpack-plugin.extension");
const interpolate_html_plugin_extension_1 = require("./interpolate-html-plugin.extension");
const { dirname, join } = path_1.posix;
const template = async function (userOptions) {
    this;
    if (userOptions === false) {
        this.store.set('features.html', false);
        return this;
    }
    this.store.set('features.html', true);
    /**
     * Add {@link BudHtmlWebpackPlugin} if it isn't already added
     */
    if (!this.extensions.has('html-webpack-plugin')) {
        await this.extensions.add(html_webpack_plugin_extension_1.BudHtmlWebpackPlugin);
    }
    /**
     * Add {@link BudInterpolateHtmlPlugin} if it isn't already added
     */
    if (!this.extensions.has('interpolate-html-plugin')) {
        await this.extensions.add(interpolate_html_plugin_extension_1.BudInterpolateHtmlPlugin);
    }
    /**
     * If there were no options specified, we're done.
     */
    if (!userOptions || userOptions === true)
        return this;
    /**
     * Plugin references
     */
    const plugins = {
        html: this.extensions.get('html-webpack-plugin'),
        interpolate: this.extensions.get('interpolate-html-plugin'),
    };
    this.info('processing html-webpack-plugin options');
    plugins.html.mergeOptions(userOptions);
    /**
     * If no template is known, provides a default
     */
    if (!plugins.html?.options.has('template')) {
        const manifest = await bud_support_1.pkgUp.pkgUp({
            cwd: require.resolve('@roots/bud-support'),
        });
        plugins.html.setOption('template', join(dirname(manifest), 'templates/template.html'));
    }
    /**
     * If there were no replacements specified, we're done.
     */
    if (!userOptions.replace)
        return this;
    this.info('processing bud-interpolate-html-plugin options');
    plugins.interpolate.mergeOptions(userOptions.replace);
    return this;
};
exports.template = template;

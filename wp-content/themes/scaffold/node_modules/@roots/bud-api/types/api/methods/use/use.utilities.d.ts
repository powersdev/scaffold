import type { Extension } from '@roots/bud-framework';
/**
 * Returns true if extensions appears to be a WebpackPlugin constructor
 *
 * @param extensions - Extensions to check
 * @returns True if extensions appears to be a WebpackPlugin constructor
 *
 * @example
 * ```ts
 * isCompilerPlugin(new WebpackPlugin())
 * // => true
 * ```
 *
 * @internal
 */
export declare const isCompilerPlugin: (extension: Extension.Module | Extension.CompilerPlugin) => boolean;
/**
 * Returns true if extensions appears to have a valid name
 *
 * @param extensions - Extensions to check
 * @returns True if extensions appears to have a valid name
 *
 * @example
 * ```ts
 * isValidName(new WebpackPlugin())
 * // => true
 * ```
 *
 * @internal
 */
export declare const hasValidConstructorName: (input: Extension.Module | Extension.CompilerPlugin) => boolean;
/**
 * Generates a unique name for extensions which do not
 * have a name prop or constructor name
 *
 * @param extensions - Extensions to check
 * @returns Unique name for extensions which do not
 * have a name prop or constructor name
 *
 * @example
 * ```ts
 * generateUniqueName(new WebpackPlugin())
 * // => 'x1240_234j__11f...'
 * ```
 *
 * @internal
 */
export declare const generateName: (input: Extension.Module | Extension.CompilerPlugin) => string;
//# sourceMappingURL=use.utilities.d.ts.map
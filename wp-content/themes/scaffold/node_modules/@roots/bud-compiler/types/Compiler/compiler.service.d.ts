import { Compiler as Contract, Service } from '@roots/bud-framework';
import { Signale } from '@roots/bud-support';
import { Configuration, MultiStats, Stats, StatsCompilation } from 'webpack';
/**
 * Wepback compilation controller class
 * @public
 */
export declare class Compiler extends Service implements Contract {
    /**
     * Compiler
     * @public
     */
    compiler: Contract.Compiler;
    /**
     * Compiler instance
     * @public
     */
    compilation: Contract.Compilation;
    /**
     * Compilation stats
     * @public
     */
    stats: StatsCompilation;
    /**
     * Compilation progress
     * @public
     */
    progress: Contract.Progress;
    /**
     * Multi-compiler configuration
     * @public
     */
    config: Array<Configuration>;
    /**
     * Logger
     * @public
     */
    get logger(): Signale;
    getCompiler(): Contract.Compiler;
    setCompiler(compiler: Contract.Compiler): void;
    /**
     * Initiates compilation
     *
     * @returns the compiler instance
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    compile(): Promise<import("webpack").MultiCompiler>;
    /**
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    invoke(config: Array<Configuration>): Promise<import("webpack").MultiCompiler>;
    /**
     * Returns final webpack configuration
     *
     * @public
     * @decorator `@bind`
     */
    before(): Promise<Configuration[]>;
    /**
     * Webpack callback
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    callback(error: Error, stats: Stats & MultiStats): Promise<void>;
    /**
     * Stats handler
     *
     * @public
     * @decorator `@bind`
     */
    handleStats(stats: Stats & MultiStats): Promise<void>;
    /**
     * Error handler
     *
     * @public
     * @decorator `@bind`
     */
    handleErrors(error: Error): Promise<void>;
    /**
     * Progress callback
     *
     * @public
     * @decorator `@bind`
     */
    progressCallback(percent: number, scope: string, ...message: any[]): void;
}
//# sourceMappingURL=compiler.service.d.ts.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compiler = void 0;
const bud_framework_1 = require("@roots/bud-framework");
const bud_support_1 = require("@roots/bud-support");
const webpack_1 = require("webpack");
const logger = __importStar(require("./compiler.logger"));
const { isFunction } = bud_support_1.lodash;
/**
 * Wepback compilation controller class
 * @public
 */
class Compiler extends bud_framework_1.Service {
    constructor() {
        super(...arguments);
        /**
         * Compiler
         * @public
         */
        this.compiler = webpack_1.webpack;
        /**
         * Multi-compiler configuration
         * @public
         */
        this.config = [];
    }
    /**
     * Logger
     * @public
     */
    get logger() {
        return logger.instance;
    }
    getCompiler() {
        return this.compiler;
    }
    setCompiler(compiler) {
        this.compiler = compiler;
    }
    /**
     * Initiates compilation
     *
     * @returns the compiler instance
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async compile() {
        this.config = await this.before();
        const compiler = await this.invoke(this.config);
        this.app.timeEnd('bud');
        this.app._hrdone = this.app._hrdiff();
        return compiler;
    }
    /**
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async invoke(config) {
        await this.app.hooks.fire('event.compiler.before');
        this.compilation = this.compiler(this.config);
        this.app.isDevelopment &&
            this.compilation.hooks.done.tap(config.shift().name, this.handleStats);
        new webpack_1.ProgressPlugin(this.progressCallback).apply(this.compilation);
        await this.app.hooks.fire('event.compiler.after');
        return this.compilation;
    }
    /**
     * Returns final webpack configuration
     *
     * @public
     * @decorator `@bind`
     */
    async before() {
        /**
         * Make config
         */
        await this.app.build.make();
        // if (this.app.hasChildren == false)
        this.config.push(this.app.build.config);
        /**
         * If there are {@link Framework.children} instances, iterate through
         * them and add to `config`
         */
        await Promise.all(this.app.children?.getValues().map(async (instance) => {
            if (!instance.name)
                return;
            await instance.build.make();
            this.config.push(instance.build.config);
        }));
        return this.config;
    }
    /**
     * Webpack callback
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async callback(error, stats) {
        if (error)
            await this.handleErrors(error);
        if (stats)
            await this.handleStats(stats);
        this.app.isProduction &&
            this.compilation.close(async (error) => {
                error ? this.app.error(error) : this.app.close();
            });
    }
    /**
     * Stats handler
     *
     * @public
     * @decorator `@bind`
     */
    async handleStats(stats) {
        if (!stats?.toJson || !isFunction(stats?.toJson))
            return;
        this.stats = stats.toJson();
        await this.app.dashboard.stats(stats);
        await this.app.hooks.fire(`event.compiler.done`);
        this.app.isProduction &&
            this.stats.errorsCount > 0 &&
            this.app.error('Errors detected in source');
    }
    /**
     * Error handler
     *
     * @public
     * @decorator `@bind`
     */
    async handleErrors(error) {
        if (!error)
            return;
        this.app.isDevelopment
            ? this.app.server.enabledMiddleware?.hot?.publish({ error })
            : this.app.error(error);
        await this.app.hooks.fire(`event.compiler.error`);
    }
    /**
     * Progress callback
     *
     * @public
     * @decorator `@bind`
     */
    progressCallback(percent, scope, ...message) {
        try {
            percent = Math.ceil((percent ?? 0) * 100);
            message = (message ? message.flatMap(i => (i ? `${i}`?.trim() : ``)) : []).reverse();
            const stage = (scope.includes(`]`) ? scope.split(`]`).pop()?.trim() : scope) ??
                ``;
            this.progress = [percent, message.join(` `).concat(stage)];
            const statusColor = bud_support_1.chalk.hex(this.stats?.errorsCount > 0 ? '#ff5c57' : '#5af78e');
            percent !== 100 && percent !== 0 && message.length
                ? this.logger.log(statusColor(`[${percent}%]`), bud_support_1.chalk.blue(`[${stage}]`), ...message)
                : this.stats?.errorsCount > 0 &&
                    this.logger.log(statusColor(`[${percent}%]`), statusColor(`Compiled with errors`));
        }
        catch (error) {
            this.app.warn(error);
        }
    }
}
__decorate([
    bud_support_1.bind,
    bud_support_1.once
], Compiler.prototype, "compile", null);
__decorate([
    bud_support_1.bind,
    bud_support_1.once
], Compiler.prototype, "invoke", null);
__decorate([
    bud_support_1.bind
], Compiler.prototype, "before", null);
__decorate([
    bud_support_1.bind,
    bud_support_1.once
], Compiler.prototype, "callback", null);
__decorate([
    bud_support_1.bind
], Compiler.prototype, "handleStats", null);
__decorate([
    bud_support_1.bind
], Compiler.prototype, "handleErrors", null);
__decorate([
    bud_support_1.bind
], Compiler.prototype, "progressCallback", null);
exports.Compiler = Compiler;
